{"version":3,"sources":["../node_modules/codemirror/mode lazy /^/.*/.js$/ groupOptions: {} namespace object","components/header.js","components/footer.js","commons/eventEmitter.js","config/index.js","actions/types.js","actions/index.js","actions/configData.js","actions/jobs.js","pages/dashBoard/clusterHostItem.js","components/noResultTips.js","pages/dashBoard/clusterUserItem.js","pages/dashBoard/clusterPgDatabaseItem.js","pages/dashBoard/clusterItem.js","pages/dashBoard/index.js","pages/playbook/infraProvision.js","pages/playbook/pgsqlProvision.js","pages/playbook/sandboxProvision.js","pages/playbook/removeClusters.js","pages/playbook/monitorOnly.js","pages/playbook/createUser.js","pages/playbook/createDatabase.js","pages/playbook/serviceProvision.js","pages/playbook/index.js","components/codeViewer.js","pages/pigstyConfig/index.js","pages/jobs/currentJobLog.js","pages/jobs/historyJobs.js","pages/jobs/index.js","components/cmdViewer.js","components/codeEditor.js","components/forms/editClusterForm.js","components/forms/editClusterHostForm.js","components/forms/editClusterPgUserForm.js","components/forms/editClusterPgDatabaseForm.js","pages/wrap.js","components/loadingCover.js","authorizedRoute.js","App.js","reportWebVitals.js","reducers/account.js","reducers/configData.js","reducers/jobs.js","reducers/index.js","store.js","components/toastsPanel.js","components/confirmBox.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","t","keys","Object","module","exports","Header","props","state","activeItem","this","history","push","data","setState","name","location","Sticky","className","onClick","_jumpHome","bind","src","alt","Menu","secondary","Item","active","pathname","handleItemClick","Icon","position","React","Component","withRouter","connect","dispatch","Footer","EventEmitter","Types","Axios","interceptors","request","use","config","timeout","headers","error","eventEmitter","emit","type","msg","reject","response","success","message","indexOf","errorInfo","actions","getConfigData","formParams","callBack","method","url","Config","qs","stringify","jsonYaml","yaml","load","hasOwnProperty","ActionTypes","GET_CONFIG_DATA_SUCCESS","storeName","catch","saveConfigData","saveLocalConfigData","SAVE_LOCAL_CONFIG_DATA_SUCCESS","addNewCluster","ADD_NEW_CLUSTER_SUCCESS","removeCluster","REMOVE_CLUSTER_SUCCESS","addNewClusterHost","ADD_NEW_CLUSTER_HOST_SUCCESS","removeClusterHost","REMOVE_CLUSTER_HOST_SUCCESS","addNewClusterPgUser","ADD_NEW_CLUSTER_PG_USER_SUCCESS","removeClusterPgUser","REMOVE_CLUSTER_PG_USER_SUCCESS","addNewClusterPgDatabase","ADD_NEW_CLUSTER_PG_DATABASE_SUCCESS","removeClusterPgDatabase","REMOVE_CLUSTER_PG_DATABASE_SUCCESS","editClusterVars","EDIT_CLUSTER_VARS_SUCCESS","saveLocalClusterConfig","SAVE_LOCAL_CLUSTER_CONFIG_SUCCESS","saveLocalClusterVarsConfig","SAVE_LOCAL_CLUSTER_VARS_CONFIG_SUCCESS","getCurrentJob","GET_CURRENT_JOB_SUCCESS","createJob","cmd","CREATE_JOB_SUCCESS","deleteJob","DELETE_JOB_SUCCESS","getJobs","GET_JOBS_SUCCESS","getJobLogs","jobId","GET_JOB_LOGS_SUCCESS","ClusterHostItem","clusterName","hostName","content","callback","flag","hostData","descs","hKeyItem","hKeyIndex","Label","Detail","toString","List","Button","size","icon","basic","_removeClusterHost","fitted","Content","as","Description","NoResultTips","title","desc","buttonText","buttomCallback","Message","warning","ClusterPgUserItem","backData","pgUser","_removeClusterPgUser","comment","ClusterPgDatabaseItem","pgDatabase","_removeClusterPgDatabase","ClusterItem","clusterData","renders","hosts","cItem","cIndex","length","editType","vars","pg_users","pItem","pIndex","pg_databases","confirmButton","playbook","cluster","backdata","eventName","that","_saveAllYaml","codeData","dump","JSONYaml","configData","sbackdata","newJSONYaml","JSON","parse","children","rCItem","edit","sbackData","ownHostsCount","ownPgUsersCount","Fragment","Card","fluid","style","fontSize","color","_editClusterVars","Meta","Divider","margin","_addNewClusterHost","_renderHosts","_manageClusterPgUser","_renderPgUsers","_addNewClusterPgDatabase","_renderPgDatabases","extra","Popup","trigger","_runScript","_destroyCluster","_editClusterYaml","_removeCluster","DashBoardPage","cKeyItem","cKeyIndex","clusterItem","primary","_addNewCluster","_renderClusters","InfraProvision","sseUrl","href","data-lang","Form","Field","Group","inline","width","Input","placeholder","onChange","value","runScript","PgsqlProvision","options","key","text","Select","compact","SandboxProvision","RemoveClusters","MonitorOnly","CreateUser","CreateDatabase","ServiceProvision","panes","menuItem","render","Tab","Pane","PlaybookPage","menu","vertical","tabular","CodeViewer","codeM","editor","getValue","renderConfigData","yamlCode","ref","_ref","theme","tabSize","keyMap","mode","_saveYaml","_goToPlaybook","PigstyConfigPage","CurrentJobLog","HistoryJobs","JobsPage","jobs","CmdViewer","cmdUrl","open","renderCode","line","codeMirrorRef","streamSSE","timer","timerGap","emitter","addListener","_startLogTimer","setInterval","close","clearInterval","EventSource","addEventListener","scrollTo","getScrollInfo","height","jobid","Modal","closeIcon","centered","onClose","closeModal","scrolling","readOnly","lineNumbers","autofocus","Actions","stopCmd","CodeEditor","parentCallback","saveCode","EditClusterForm","setOpen","_inputChange","_editCluster","pg_offline_query","host_ip","pg_role","pg_seq","roleOptions","roleValue","forEach","hItem","hIndex","_inputHandle","parseInt","Radio","label","checked","_editClusterHost","EditClusterPgUserForm","password","login","superuser","createdb","createrole","inherit","replication","bypassrls","connlimit","expire_at","parameters","search_path","roles","expire_in","pgbouncer","parameterKey","parameterValue","splice","findIndex","item","fromData","formData","_renderParameters","widths","disabled","_deleteParameter","join","split","_addParameter","_addNewClusterPgUser","EditClusterPgDatabaseForm","owner","schemas","extensions","allowconn","revokeconn","extensionKey","extensionValue","newExtension","schema","extension","newE","eItem","eIndex","_renderExtensions","_deleteExtension","_addExtension","Wrap","path","exact","component","DashBoard","LoadingCover","visible","loadingText","marginLeft","AuthorizedRoute","rest","_getConfigData","App","basename","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","list","logs","reducers","combineReducers","account","action","pg_cluster","fIndex","middlewares","store","next","thunk","applyMiddleware","createStore","createStoreWithMiddleware","ToastsPanel","toasts","shift","setTimeout","_delItem","tItem","tIndex","header","_renderToast","ConfirmBox","cancelButton","Confirm","onCancel","handleCancel","onConfirm","handleConfirm","ReactDOM","document","getElementById"],"mappings":"6OAAA,IAAIA,EAAM,CACT,eAAgB,CACf,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,mBAAoB,CACnB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,mBAAoB,CACnB,IACA,GAED,uBAAwB,CACvB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iCAAkC,CACjC,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,eAAgB,CACf,IACA,GAED,qBAAsB,CACrB,IACA,IAED,WAAY,CACX,IACA,IAED,iBAAkB,CACjB,IACA,EACA,IAED,iBAAkB,CACjB,IACA,IAED,qBAAsB,CACrB,IACA,EACA,EACA,IAED,6BAA8B,CAC7B,IACA,IAED,eAAgB,CACf,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,IAED,qBAAsB,CACrB,IACA,IAED,eAAgB,CACf,IACA,IAED,qBAAsB,CACrB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,eAAgB,CACf,IACA,IAED,mBAAoB,CACnB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,eAAgB,CACf,IACA,IAED,eAAgB,CACf,IACA,EACA,IAED,uBAAwB,CACvB,IACA,IAED,aAAc,CACb,IACA,IAED,qBAAsB,CACrB,IACA,IAED,iBAAkB,CACjB,IACA,EACA,EACA,IAED,6BAA8B,CAC7B,IACA,IAED,yCAA0C,CACzC,IACA,IAED,uBAAwB,CACvB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,iCAAkC,CACjC,IACA,EACA,EACA,IAED,2BAA4B,CAC3B,IACA,EACA,EACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,IAED,6BAA8B,CAC7B,IACA,GAED,qBAAsB,CACrB,IACA,IAED,eAAgB,CACf,IACA,EACA,IAED,mBAAoB,CACnB,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,eAAgB,CACf,IACA,IAED,yBAA0B,CACzB,IACA,GAED,+BAAgC,CAC/B,IACA,IAED,iBAAkB,CACjB,IACA,IAED,YAAa,CACZ,KAED,iBAAkB,CACjB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,aAAc,CACb,IACA,IAED,qBAAsB,CACrB,IACA,IAED,mBAAoB,CACnB,IACA,EACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,EACA,EACA,EACA,IAED,eAAgB,CACf,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,eAAgB,CACf,IACA,EACA,EACA,GAED,qBAAsB,CACrB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,WAAY,CACX,IACA,IAED,WAAY,CACX,IACA,IAED,eAAgB,CACf,IACA,IAED,eAAgB,CACf,IACA,IAED,iBAAkB,CACjB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,IAED,iBAAkB,CACjB,IACA,EACA,IAED,qBAAsB,CACrB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,iBAAkB,CACjB,IACA,EACA,EACA,IAED,2BAA4B,CAC3B,IACA,IAED,qBAAsB,CACrB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,eAAgB,CACf,IACA,EACA,EACA,IAED,qBAAsB,CACrB,IACA,IAED,+BAAgC,CAC/B,IACA,KAED,eAAgB,CACf,IACA,KAED,iBAAkB,CACjB,IACA,KAED,qBAAsB,CACrB,IACA,GAED,mBAAoB,CACnB,IACA,KAED,eAAgB,CACf,IACA,KAED,uBAAwB,CACvB,IACA,KAED,6BAA8B,CAC7B,IACA,KAED,iBAAkB,CACjB,IACA,KAED,iBAAkB,C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","file":"static/js/main.513391a0.chunk.js","sourcesContent":["var map = {\n\t\"./apl/apl.js\": [\n\t\t262,\n\t\t30\n\t],\n\t\"./asciiarmor/asciiarmor.js\": [\n\t\t263,\n\t\t31\n\t],\n\t\"./asn.1/asn.1.js\": [\n\t\t264,\n\t\t32\n\t],\n\t\"./asterisk/asterisk.js\": [\n\t\t265,\n\t\t33\n\t],\n\t\"./brainfuck/brainfuck.js\": [\n\t\t266,\n\t\t34\n\t],\n\t\"./clike/clike.js\": [\n\t\t251,\n\t\t2\n\t],\n\t\"./clojure/clojure.js\": [\n\t\t267,\n\t\t35\n\t],\n\t\"./cmake/cmake.js\": [\n\t\t268,\n\t\t36\n\t],\n\t\"./cobol/cobol.js\": [\n\t\t269,\n\t\t37\n\t],\n\t\"./coffeescript/coffeescript.js\": [\n\t\t252,\n\t\t38\n\t],\n\t\"./commonlisp/commonlisp.js\": [\n\t\t270,\n\t\t39\n\t],\n\t\"./crystal/crystal.js\": [\n\t\t271,\n\t\t40\n\t],\n\t\"./css/css.js\": [\n\t\t248,\n\t\t1\n\t],\n\t\"./cypher/cypher.js\": [\n\t\t272,\n\t\t41\n\t],\n\t\"./d/d.js\": [\n\t\t273,\n\t\t42\n\t],\n\t\"./dart/dart.js\": [\n\t\t274,\n\t\t2,\n\t\t43\n\t],\n\t\"./diff/diff.js\": [\n\t\t275,\n\t\t44\n\t],\n\t\"./django/django.js\": [\n\t\t276,\n\t\t0,\n\t\t1,\n\t\t11\n\t],\n\t\"./dockerfile/dockerfile.js\": [\n\t\t277,\n\t\t21\n\t],\n\t\"./dtd/dtd.js\": [\n\t\t278,\n\t\t45\n\t],\n\t\"./dylan/dylan.js\": [\n\t\t279,\n\t\t46\n\t],\n\t\"./ebnf/ebnf.js\": [\n\t\t280,\n\t\t47\n\t],\n\t\"./ecl/ecl.js\": [\n\t\t281,\n\t\t48\n\t],\n\t\"./eiffel/eiffel.js\": [\n\t\t282,\n\t\t49\n\t],\n\t\"./elm/elm.js\": [\n\t\t283,\n\t\t50\n\t],\n\t\"./erlang/erlang.js\": [\n\t\t284,\n\t\t51\n\t],\n\t\"./factor/factor.js\": [\n\t\t285,\n\t\t22\n\t],\n\t\"./fcl/fcl.js\": [\n\t\t286,\n\t\t52\n\t],\n\t\"./forth/forth.js\": [\n\t\t287,\n\t\t53\n\t],\n\t\"./fortran/fortran.js\": [\n\t\t288,\n\t\t54\n\t],\n\t\"./gas/gas.js\": [\n\t\t289,\n\t\t55\n\t],\n\t\"./gfm/gfm.js\": [\n\t\t290,\n\t\t4,\n\t\t20\n\t],\n\t\"./gherkin/gherkin.js\": [\n\t\t291,\n\t\t56\n\t],\n\t\"./go/go.js\": [\n\t\t292,\n\t\t57\n\t],\n\t\"./groovy/groovy.js\": [\n\t\t293,\n\t\t58\n\t],\n\t\"./haml/haml.js\": [\n\t\t294,\n\t\t0,\n\t\t1,\n\t\t14\n\t],\n\t\"./handlebars/handlebars.js\": [\n\t\t253,\n\t\t16\n\t],\n\t\"./haskell-literate/haskell-literate.js\": [\n\t\t295,\n\t\t26\n\t],\n\t\"./haskell/haskell.js\": [\n\t\t254,\n\t\t59\n\t],\n\t\"./haxe/haxe.js\": [\n\t\t296,\n\t\t60\n\t],\n\t\"./htmlembedded/htmlembedded.js\": [\n\t\t297,\n\t\t0,\n\t\t1,\n\t\t10\n\t],\n\t\"./htmlmixed/htmlmixed.js\": [\n\t\t247,\n\t\t0,\n\t\t1,\n\t\t27\n\t],\n\t\"./http/http.js\": [\n\t\t298,\n\t\t61\n\t],\n\t\"./idl/idl.js\": [\n\t\t299,\n\t\t62\n\t],\n\t\"./javascript/javascript.js\": [\n\t\t249,\n\t\t0\n\t],\n\t\"./jinja2/jinja2.js\": [\n\t\t300,\n\t\t63\n\t],\n\t\"./jsx/jsx.js\": [\n\t\t301,\n\t\t0,\n\t\t28\n\t],\n\t\"./julia/julia.js\": [\n\t\t302,\n\t\t64\n\t],\n\t\"./livescript/livescript.js\": [\n\t\t303,\n\t\t65\n\t],\n\t\"./lua/lua.js\": [\n\t\t304,\n\t\t66\n\t],\n\t\"./markdown/markdown.js\": [\n\t\t259,\n\t\t4\n\t],\n\t\"./mathematica/mathematica.js\": [\n\t\t305,\n\t\t67\n\t],\n\t\"./mbox/mbox.js\": [\n\t\t306,\n\t\t68\n\t],\n\t\"./meta.js\": [\n\t\t161\n\t],\n\t\"./mirc/mirc.js\": [\n\t\t307,\n\t\t69\n\t],\n\t\"./mllike/mllike.js\": [\n\t\t308,\n\t\t70\n\t],\n\t\"./modelica/modelica.js\": [\n\t\t309,\n\t\t71\n\t],\n\t\"./mscgen/mscgen.js\": [\n\t\t310,\n\t\t72\n\t],\n\t\"./mumps/mumps.js\": [\n\t\t311,\n\t\t73\n\t],\n\t\"./nginx/nginx.js\": [\n\t\t312,\n\t\t74\n\t],\n\t\"./nsis/nsis.js\": [\n\t\t313,\n\t\t23\n\t],\n\t\"./ntriples/ntriples.js\": [\n\t\t314,\n\t\t75\n\t],\n\t\"./octave/octave.js\": [\n\t\t315,\n\t\t76\n\t],\n\t\"./oz/oz.js\": [\n\t\t316,\n\t\t77\n\t],\n\t\"./pascal/pascal.js\": [\n\t\t317,\n\t\t78\n\t],\n\t\"./pegjs/pegjs.js\": [\n\t\t318,\n\t\t0,\n\t\t79\n\t],\n\t\"./perl/perl.js\": [\n\t\t319,\n\t\t80\n\t],\n\t\"./php/php.js\": [\n\t\t320,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t17\n\t],\n\t\"./pig/pig.js\": [\n\t\t321,\n\t\t81\n\t],\n\t\"./powershell/powershell.js\": [\n\t\t322,\n\t\t82\n\t],\n\t\"./properties/properties.js\": [\n\t\t323,\n\t\t83\n\t],\n\t\"./protobuf/protobuf.js\": [\n\t\t324,\n\t\t84\n\t],\n\t\"./pug/pug.js\": [\n\t\t260,\n\t\t0,\n\t\t1,\n\t\t3\n\t],\n\t\"./puppet/puppet.js\": [\n\t\t325,\n\t\t85\n\t],\n\t\"./python/python.js\": [\n\t\t255,\n\t\t86\n\t],\n\t\"./q/q.js\": [\n\t\t326,\n\t\t87\n\t],\n\t\"./r/r.js\": [\n\t\t327,\n\t\t88\n\t],\n\t\"./rpm/rpm.js\": [\n\t\t328,\n\t\t89\n\t],\n\t\"./rst/rst.js\": [\n\t\t329,\n\t\t13\n\t],\n\t\"./ruby/ruby.js\": [\n\t\t250,\n\t\t90\n\t],\n\t\"./rust/rust.js\": [\n\t\t330,\n\t\t24\n\t],\n\t\"./sas/sas.js\": [\n\t\t331,\n\t\t91\n\t],\n\t\"./sass/sass.js\": [\n\t\t257,\n\t\t1,\n\t\t92\n\t],\n\t\"./scheme/scheme.js\": [\n\t\t332,\n\t\t93\n\t],\n\t\"./shell/shell.js\": [\n\t\t333,\n\t\t94\n\t],\n\t\"./sieve/sieve.js\": [\n\t\t334,\n\t\t95\n\t],\n\t\"./slim/slim.js\": [\n\t\t335,\n\t\t0,\n\t\t1,\n\t\t15\n\t],\n\t\"./smalltalk/smalltalk.js\": [\n\t\t336,\n\t\t96\n\t],\n\t\"./smarty/smarty.js\": [\n\t\t337,\n\t\t97\n\t],\n\t\"./solr/solr.js\": [\n\t\t338,\n\t\t98\n\t],\n\t\"./soy/soy.js\": [\n\t\t339,\n\t\t0,\n\t\t1,\n\t\t18\n\t],\n\t\"./sparql/sparql.js\": [\n\t\t340,\n\t\t99\n\t],\n\t\"./spreadsheet/spreadsheet.js\": [\n\t\t341,\n\t\t100\n\t],\n\t\"./sql/sql.js\": [\n\t\t342,\n\t\t101\n\t],\n\t\"./stex/stex.js\": [\n\t\t256,\n\t\t102\n\t],\n\t\"./stylus/stylus.js\": [\n\t\t261,\n\t\t5\n\t],\n\t\"./swift/swift.js\": [\n\t\t343,\n\t\t103\n\t],\n\t\"./tcl/tcl.js\": [\n\t\t344,\n\t\t104\n\t],\n\t\"./textile/textile.js\": [\n\t\t345,\n\t\t105\n\t],\n\t\"./tiddlywiki/tiddlywiki.js\": [\n\t\t346,\n\t\t106\n\t],\n\t\"./tiki/tiki.js\": [\n\t\t347,\n\t\t107\n\t],\n\t\"./toml/toml.js\": [\n\t\t348,\n\t\t108\n\t],\n\t\"./tornado/tornado.js\": [\n\t\t349,\n\t\t0,\n\t\t1,\n\t\t12\n\t],\n\t\"./troff/troff.js\": [\n\t\t350,\n\t\t109\n\t],\n\t\"./ttcn-cfg/ttcn-cfg.js\": [\n\t\t352,\n\t\t110\n\t],\n\t\"./ttcn/ttcn.js\": [\n\t\t351,\n\t\t111\n\t],\n\t\"./turtle/turtle.js\": [\n\t\t353,\n\t\t112\n\t],\n\t\"./twig/twig.js\": [\n\t\t354,\n\t\t19\n\t],\n\t\"./vb/vb.js\": [\n\t\t355,\n\t\t113\n\t],\n\t\"./vbscript/vbscript.js\": [\n\t\t356,\n\t\t114\n\t],\n\t\"./velocity/velocity.js\": [\n\t\t357,\n\t\t115\n\t],\n\t\"./verilog/verilog.js\": [\n\t\t358,\n\t\t116\n\t],\n\t\"./vhdl/vhdl.js\": [\n\t\t359,\n\t\t117\n\t],\n\t\"./vue/vue.js\": [\n\t\t360,\n\t\t0,\n\t\t1,\n\t\t5,\n\t\t3,\n\t\t9\n\t],\n\t\"./wast/wast.js\": [\n\t\t361,\n\t\t25\n\t],\n\t\"./webidl/webidl.js\": [\n\t\t362,\n\t\t118\n\t],\n\t\"./xml/xml.js\": [\n\t\t246,\n\t\t119\n\t],\n\t\"./xquery/xquery.js\": [\n\t\t363,\n\t\t120\n\t],\n\t\"./yacas/yacas.js\": [\n\t\t364,\n\t\t121\n\t],\n\t\"./yaml-frontmatter/yaml-frontmatter.js\": [\n\t\t365,\n\t\t29\n\t],\n\t\"./yaml/yaml.js\": [\n\t\t258,\n\t\t122\n\t],\n\t\"./z80/z80.js\": [\n\t\t366,\n\t\t123\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 235;\nmodule.exports = webpackAsyncContext;","import React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {Icon, Menu, Sticky} from 'semantic-ui-react'\r\nimport './header.css';\r\n\r\nclass Header extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeItem: ''\r\n        }\r\n    }\r\n\r\n    _jumpHome(){\r\n        const {\r\n            history,\r\n        } = this.props;\r\n        history.push('/');\r\n    }\r\n\r\n    handleItemClick(e,data){\r\n        const {\r\n            history,\r\n        } = this.props;\r\n        this.setState({\r\n            activeItem:data.name\r\n        })\r\n        history.push('/'+data.name);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const {\r\n            location\r\n        } = this.props;\r\n        const {\r\n            activeItem\r\n        } = this.state;\r\n\r\n\r\n        //let orgSelect = this._renderOrgSelecet();\r\n        return (\r\n            <Sticky>\r\n                <div className='top-header'>\r\n                    <a onClick={this._jumpHome.bind(this)} className=\"sidemenu__logo\">\r\n                        <div className=\"icon-menu\">\r\n                            <img src=\"/img/pigsty/logo-white.svg\" alt=\"pigsty\" />\r\n                        </div>\r\n                        <img className=\"menu-img\" src=\"/img/pigsty/menulogo.svg\" alt=\"pigsty\" />\r\n                    </a>\r\n\r\n                    <Menu secondary className='top-header-menu'>\r\n                        <Menu.Item\r\n                            name=''\r\n                            active={location.pathname === '/'}\r\n                            onClick={this.handleItemClick.bind(this)}\r\n                        >\r\n                            <Icon name='sitemap' />\r\n                            Cluster\r\n                        </Menu.Item>\r\n                        <Menu.Item\r\n                            name='jobs'\r\n                            active={location.pathname === '/jobs'}\r\n                            onClick={this.handleItemClick.bind(this)}\r\n                        >\r\n                            <Icon name='terminal' />\r\n                            Jobs\r\n                        </Menu.Item>\r\n                        <Menu.Item\r\n                            name='config'\r\n                            active={location.pathname === '/config'}\r\n                            onClick={this.handleItemClick.bind(this)}\r\n                        >\r\n                            <Icon name='code' />\r\n                            Yaml\r\n                        </Menu.Item>\r\n                        <Menu.Item\r\n                            name='playbook'\r\n                            active={location.pathname === '/playbook'}\r\n                            onClick={this.handleItemClick.bind(this)}\r\n                        >\r\n                            <Icon name='paper plane outline' />\r\n                            Playbook\r\n                        </Menu.Item>\r\n                        <Menu.Menu position='right'>\r\n                            {/*<Menu.Item>*/}\r\n                            {/*    <Input icon='search' placeholder='Search...' />*/}\r\n                            {/*</Menu.Item>*/}\r\n                            {/*<Menu.Item*/}\r\n                            {/*    name='Sign Out'*/}\r\n                            {/*    active={activeItem === 'logout'}*/}\r\n                            {/*    onClick={this.handleItemClick.bind(this)}*/}\r\n                            {/*/>*/}\r\n                        </Menu.Menu>\r\n                    </Menu>\r\n                </div>\r\n            </Sticky>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n    //account: state.account,\r\n    //managerList:state.organization.managerList\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    //logout: (formParams, callBack) => dispatch(actions.logout(formParams, callBack)),\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Header));\r\n","import './footer.css'\r\nfunction Footer() {\r\n    return (\r\n        <div className=\"footer\">\r\n            <div className=\"copyright\">\r\n                © 2021 pigsty\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n","import {EventEmitter} from 'events';\r\n\r\nexport default new EventEmitter();\r\n","let _officialServerUrl = '';\r\n//let _officialServerUrl = 'http://127.0.0.1/pigstycli';\r\n\r\n\r\nexport default {\r\n    officialServerUrl:_officialServerUrl,\r\n}\r\n","const Types = {\r\n    //loadInitData.js\r\n    'GET_CONFIG_DATA_SUCCESS':'GET_CONFIG_DATA_SUCCESS',\r\n    'SAVE_CONFIG_DATA_SUCCESS':'SAVE_CONFIG_DATA_SUCCESS',\r\n    'SAVE_LOCAL_CONFIG_DATA_SUCCESS':'SAVE_LOCAL_CONFIG_DATA_SUCCESS',\r\n\r\n    'ADD_NEW_CLUSTER_SUCCESS':'ADD_NEW_CLUSTER_SUCCESS',\r\n    'REMOVE_CLUSTER_SUCCESS':'REMOVE_CLUSTER_SUCCESS',\r\n\r\n    'ADD_NEW_CLUSTER_HOST_SUCCESS':'ADD_NEW_CLUSTER_HOST_SUCCESS',\r\n    'REMOVE_CLUSTER_HOST_SUCCESS':'REMOVE_CLUSTER_HOST_SUCCESS',\r\n\r\n    'ADD_NEW_CLUSTER_PG_USER_SUCCESS':'ADD_NEW_CLUSTER_PG_USER_SUCCESS',\r\n    'REMOVE_CLUSTER_PG_USER_SUCCESS':'REMOVE_CLUSTER_PG_USER_SUCCESS',\r\n\r\n    'ADD_NEW_CLUSTER_PG_DATABASE_SUCCESS':'ADD_NEW_CLUSTER_PG_DATABASE_SUCCESS',\r\n    'REMOVE_CLUSTER_PG_DATABASE_SUCCESS':'REMOVE_CLUSTER_PG_DATABASE_SUCCESS',\r\n\r\n    'EDIT_CLUSTER_VARS_SUCCESS':'EDIT_CLUSTER_VARS_SUCCESS',\r\n\r\n    'SAVE_LOCAL_CLUSTER_VARS_CONFIG_SUCCESS':'SAVE_LOCAL_CLUSTER_VARS_CONFIG_SUCCESS',\r\n    'SAVE_LOCAL_CLUSTER_CONFIG_SUCCESS':'SAVE_LOCAL_CLUSTER_CONFIG_SUCCESS',\r\n\r\n    //job\r\n    'GET_CURRENT_JOB_SUCCESS':'GET_CURRENT_JOB_SUCCESS',\r\n    'GET_JOB_LOGS_SUCCESS':'GET_JOB_LOGS_SUCCESS',\r\n    'DELETE_JOB_SUCCESS':'DELETE_JOB_SUCCESS',\r\n    'CREATE_JOB_SUCCESS':'CREATE_JOB_SUCCESS',\r\n\r\n    'GET_JOBS_SUCCESS':'GET_JOBS_SUCCESS',\r\n\r\n\r\n\r\n}\r\n\r\nexport default Types;\r\n","import Axios from \"axios\";\r\nimport eventEmitter from \"../commons/eventEmitter\";\r\nimport {\r\n    getConfigData,\r\n    saveConfigData,\r\n    saveLocalConfigData,\r\n\r\n    addNewCluster,\r\n    removeCluster,\r\n\r\n    addNewClusterHost,\r\n    removeClusterHost,\r\n\r\n    addNewClusterPgUser,\r\n    removeClusterPgUser,\r\n\r\n    addNewClusterPgDatabase,\r\n    removeClusterPgDatabase,\r\n\r\n    editClusterVars,\r\n\r\n    saveLocalClusterConfig,\r\n    saveLocalClusterVarsConfig\r\n} from './configData';\r\n\r\nimport {\r\n    getCurrentJob,\r\n    createJob,\r\n    deleteJob,\r\n    getJobs,\r\n    getJobLogs\r\n} from './jobs';\r\n\r\n\r\nAxios.interceptors.request.use(function (config) {\r\n    // Do something before request is sent\r\n\r\n    config.timeout = 10000;\r\n    config.headers = {\r\n        'content-type': 'application/x-www-form-urlencoded'\r\n    }\r\n    return config;\r\n}, function (error) {\r\n    // Do something with request error\r\n    eventEmitter.emit('showToasts',{\r\n        type:'error',\r\n        msg:error\r\n    })\r\n    return Promise.reject(error);\r\n});\r\nAxios.interceptors.response.use(function (response) {\r\n\r\n    if(response.data.success === false){\r\n        eventEmitter.emit('showToasts',{\r\n            type:'error',\r\n            msg:response.data\r\n        })\r\n    }\r\n    return response\r\n}, function (error) {\r\n    if(error.message === 'Network Error' || error.message.indexOf('timeout') !== -1){\r\n        eventEmitter.emit('showToasts',{\r\n            type:'error',\r\n            msg:error.message\r\n        })\r\n    }else {\r\n        eventEmitter.emit('showToasts',{\r\n            type:'error',\r\n            msg:error.response.data.errorInfo\r\n        })\r\n    }\r\n    return Promise.reject(error)\r\n})\r\n\r\nconst actions = {\r\n    getConfigData,\r\n    saveConfigData,\r\n    saveLocalConfigData,\r\n    addNewCluster,\r\n    removeCluster,\r\n    addNewClusterHost,\r\n    removeClusterHost,\r\n    addNewClusterPgUser,\r\n    removeClusterPgUser,\r\n    addNewClusterPgDatabase,\r\n    removeClusterPgDatabase,\r\n    editClusterVars,\r\n    saveLocalClusterConfig,\r\n    saveLocalClusterVarsConfig,\r\n\r\n    getCurrentJob,\r\n    createJob,\r\n    deleteJob,\r\n    getJobs,\r\n    getJobLogs,\r\n}\r\n\r\nexport default actions;\r\n","import Axios from \"axios\";\r\nimport qs from 'qs';\r\nimport Config from '../config';\r\nimport ActionTypes from './types';\r\nimport yaml from 'js-yaml'\r\n//\r\nexport function getConfigData(formParams,callBack) {\r\n    return dispatch=>{\r\n        Axios({\r\n            method:'get',\r\n            url:Config.officialServerUrl+'/api/v1/config/',\r\n            data:qs.stringify({\r\n                ...formParams\r\n            })\r\n        }).then(data=>{\r\n            let jsonYaml;\r\n            if(typeof(data.data) == 'object'){\r\n                jsonYaml = data.data;\r\n            }else {\r\n                jsonYaml = yaml.load(data.data);\r\n            }\r\n\r\n            if(jsonYaml.hasOwnProperty('all')){\r\n                dispatch({\r\n                    type:ActionTypes.GET_CONFIG_DATA_SUCCESS,\r\n                    storeName:'configData',\r\n                    data:jsonYaml,\r\n                    ...formParams\r\n                });\r\n                if (typeof callBack === 'function') {\r\n                    callBack({\r\n                        success:true,\r\n                        data:jsonYaml,\r\n                    })\r\n                }\r\n            }else {\r\n                if (typeof callBack === 'function') {\r\n                    callBack({\r\n                        success:false,\r\n                        error:data.data\r\n                    })\r\n                }\r\n            }\r\n        }).catch(error=>{\r\n            //debugger;\r\n        })\r\n    }\r\n}\r\n\r\nexport function saveConfigData(formParams,callBack) {\r\n    return dispatch=>{\r\n        Axios({\r\n            method:'post',\r\n            url:Config.officialServerUrl+'/api/v1/config/',\r\n            data:formParams\r\n        }).then(data=>{\r\n            if(data.data.message === 'ok'){\r\n                if (typeof callBack === 'function') {\r\n                    callBack({\r\n                        success:true,\r\n                        data:data.data,\r\n                    })\r\n                }\r\n            }\r\n\r\n        }).catch(error=>{\r\n            //debugger;\r\n        })\r\n    }\r\n}\r\n\r\nexport function saveLocalConfigData(formParams,callBack) {\r\n    return dispatch=>{\r\n        dispatch({\r\n            type:ActionTypes.SAVE_LOCAL_CONFIG_DATA_SUCCESS,\r\n            storeName:'configData',\r\n            ...formParams\r\n        });\r\n        if (typeof callBack === 'function') {\r\n            callBack({\r\n                success:true,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function addNewCluster(formParams,callBack) {\r\n    return dispatch=>{\r\n        dispatch({\r\n            type:ActionTypes.ADD_NEW_CLUSTER_SUCCESS,\r\n            storeName:'configData',\r\n            ...formParams\r\n        });\r\n        if (typeof callBack === 'function') {\r\n            callBack({\r\n                success:true,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function removeCluster(formParams,callBack) {\r\n    return dispatch=>{\r\n        dispatch({\r\n            type:ActionTypes.REMOVE_CLUSTER_SUCCESS,\r\n            storeName:'configData',\r\n            ...formParams\r\n        });\r\n        if (typeof callBack === 'function') {\r\n            callBack({\r\n                success:true,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function addNewClusterHost(formParams,callBack) {\r\n    return dispatch=>{\r\n        dispatch({\r\n            type:ActionTypes.ADD_NEW_CLUSTER_HOST_SUCCESS,\r\n            storeName:'configData',\r\n            ...formParams\r\n        });\r\n        if (typeof callBack === 'function') {\r\n            callBack({\r\n                success:true,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function removeClusterHost(formParams,callBack) {\r\n    return dispatch=>{\r\n        dispatch({\r\n            type:ActionTypes.REMOVE_CLUSTER_HOST_SUCCESS,\r\n            storeName:'configData',\r\n            ...formParams\r\n        });\r\n        if (typeof callBack === 'function') {\r\n            callBack({\r\n                success:true,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function addNewClusterPgUser(formParams,callBack) {\r\n    return dispatch=>{\r\n        dispatch({\r\n            type:ActionTypes.ADD_NEW_CLUSTER_PG_USER_SUCCESS,\r\n            storeName:'configData',\r\n            ...formParams\r\n        });\r\n        if (typeof callBack === 'function') {\r\n            callBack({\r\n                success:true,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function removeClusterPgUser(formParams,callBack) {\r\n    return dispatch=>{\r\n        dispatch({\r\n            type:ActionTypes.REMOVE_CLUSTER_PG_USER_SUCCESS,\r\n            storeName:'configData',\r\n            ...formParams\r\n        });\r\n        if (typeof callBack === 'function') {\r\n            callBack({\r\n                success:true,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function addNewClusterPgDatabase(formParams,callBack) {\r\n    return dispatch=>{\r\n        dispatch({\r\n            type:ActionTypes.ADD_NEW_CLUSTER_PG_DATABASE_SUCCESS,\r\n            storeName:'configData',\r\n            ...formParams\r\n        });\r\n        if (typeof callBack === 'function') {\r\n            callBack({\r\n                success:true,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function removeClusterPgDatabase(formParams,callBack) {\r\n    return dispatch=>{\r\n        dispatch({\r\n            type:ActionTypes.REMOVE_CLUSTER_PG_DATABASE_SUCCESS,\r\n            storeName:'configData',\r\n            ...formParams\r\n        });\r\n        if (typeof callBack === 'function') {\r\n            callBack({\r\n                success:true,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function editClusterVars(formParams,callBack) {\r\n    return dispatch=>{\r\n        dispatch({\r\n            type:ActionTypes.EDIT_CLUSTER_VARS_SUCCESS,\r\n            storeName:'configData',\r\n            ...formParams\r\n        });\r\n        if (typeof callBack === 'function') {\r\n            callBack({\r\n                success:true,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function saveLocalClusterVarsConfig(formParams,callBack) {\r\n    return dispatch=>{\r\n        dispatch({\r\n            type:ActionTypes.SAVE_LOCAL_CLUSTER_VARS_CONFIG_SUCCESS,\r\n            storeName:'configData',\r\n            ...formParams\r\n        });\r\n        if (typeof callBack === 'function') {\r\n            callBack({\r\n                success:true,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function saveLocalClusterConfig(formParams,callBack) {\r\n    return dispatch=>{\r\n        dispatch({\r\n            type:ActionTypes.SAVE_LOCAL_CLUSTER_CONFIG_SUCCESS,\r\n            storeName:'configData',\r\n            ...formParams\r\n        });\r\n        if (typeof callBack === 'function') {\r\n            callBack({\r\n                success:true,\r\n            })\r\n        }\r\n    }\r\n}\r\n","import Axios from \"axios\";\r\nimport qs from 'qs';\r\nimport Config from '../config';\r\nimport ActionTypes from './types';\r\nimport yaml from 'js-yaml'\r\n//\r\nexport function getCurrentJob(formParams,callBack) {\r\n    return dispatch=>{\r\n        Axios({\r\n            method:'get',\r\n            url:Config.officialServerUrl+'/api/v1/job',\r\n            data:qs.stringify({\r\n                ...formParams\r\n            })\r\n        }).then(data=>{\r\n            dispatch({\r\n                type:ActionTypes.GET_CURRENT_JOB_SUCCESS,\r\n                storeName:'jobs',\r\n                data:data.data,\r\n                ...formParams\r\n            });\r\n            if (typeof callBack === 'function') {\r\n                callBack({\r\n                    success:true,\r\n                    data:data.data,\r\n                })\r\n            }\r\n        }).catch(error=>{\r\n            //debugger;\r\n        })\r\n    }\r\n}\r\n\r\nexport function getJobLogs(formParams,callBack) {\r\n    return dispatch=>{\r\n        Axios({\r\n            method:'get',\r\n            url:Config.officialServerUrl+'/log/'+formParams.jobId,\r\n            data:qs.stringify({\r\n                ...formParams\r\n            })\r\n        }).then(data=>{\r\n            dispatch({\r\n                type:ActionTypes.GET_JOB_LOGS_SUCCESS,\r\n                storeName:'jobLogs',\r\n                data:data.data,\r\n                ...formParams\r\n            });\r\n            if (typeof callBack === 'function') {\r\n                callBack({\r\n                    success:true,\r\n                    data:data.data,\r\n                })\r\n            }\r\n        }).catch(error=>{\r\n            debugger;\r\n        })\r\n    }\r\n}\r\n\r\nexport function createJob(formParams,callBack) {\r\n    return dispatch=>{\r\n        Axios({\r\n            method:'post',\r\n            url:Config.officialServerUrl+'/api/v1/job'+formParams.cmd,\r\n            data:qs.stringify({\r\n                ...formParams\r\n            })\r\n        }).then(data=>{\r\n            dispatch({\r\n                type:ActionTypes.CREATE_JOB_SUCCESS,\r\n                storeName:'jobs',\r\n                data:data.data,\r\n                ...formParams\r\n            });\r\n            if (typeof callBack === 'function') {\r\n                callBack({\r\n                    success:true,\r\n                    data:data.data,\r\n                })\r\n            }\r\n        }).catch(error=>{\r\n            debugger;\r\n        })\r\n    }\r\n}\r\n\r\nexport function deleteJob(formParams,callBack) {\r\n    return dispatch=>{\r\n        Axios({\r\n            method:'delete',\r\n            url:Config.officialServerUrl+'/api/v1/job',\r\n            data:qs.stringify({\r\n                ...formParams\r\n            })\r\n        }).then(data=>{\r\n            dispatch({\r\n                type:ActionTypes.DELETE_JOB_SUCCESS,\r\n                storeName:'jobs',\r\n                data:data.data,\r\n                ...formParams\r\n            });\r\n            if (typeof callBack === 'function') {\r\n                callBack({\r\n                    success:true,\r\n                    data:data.data,\r\n                })\r\n            }\r\n        }).catch(error=>{\r\n            if (typeof callBack === 'function') {\r\n                callBack({\r\n                    success:true,\r\n                    data:error,\r\n                })\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function getJobs(formParams,callBack) {\r\n    return dispatch=>{\r\n        Axios({\r\n            method:'get',\r\n            url:Config.officialServerUrl+'/api/v1/job',\r\n            data:qs.stringify({\r\n                ...formParams\r\n            })\r\n        }).then(data=>{\r\n            dispatch({\r\n                type:ActionTypes.GET_JOBS_SUCCESS,\r\n                storeName:'jobs',\r\n                data:data.data,\r\n                ...formParams\r\n            });\r\n            if (typeof callBack === 'function') {\r\n                callBack({\r\n                    success:true,\r\n                    data:data.data,\r\n                })\r\n            }\r\n        }).catch(error=>{\r\n            //debugger;\r\n        })\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport actions from \"../../actions\";\r\nimport { Button, List,Icon,Label } from 'semantic-ui-react';\r\nimport eventEmitter from \"../../commons/eventEmitter\";\r\n\r\nclass ClusterHostItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    _removeClusterHost(){\r\n        const {\r\n            removeClusterHost,\r\n            clusterName,\r\n            hostName\r\n        } = this.props;\r\n\r\n        eventEmitter.emit(\r\n            'showConfirmBox',\r\n            {\r\n                content:'It will remove this cluster host !',\r\n                callback:(flag)=>{\r\n                    if(flag){\r\n                        removeClusterHost({\r\n                            clusterName,\r\n                            hostName:hostName\r\n                        },callback=>{\r\n\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            hostData,\r\n            hostName\r\n        } = this.props;\r\n        let descs = [];\r\n        if(hostData){\r\n            descs = Object.keys(hostData).map((hKeyItem,hKeyIndex)=>{\r\n                return (\r\n                    <Label key={'k-'+hKeyIndex}>\r\n                        {hKeyItem}:\r\n                        <Label.Detail>{hostData[hKeyItem].toString()}</Label.Detail>\r\n                    </Label>\r\n                )\r\n            })\r\n        }\r\n        return (\r\n            <List.Item className='mb-1rem'>\r\n                <Button size='mini' icon='trash' basic className='right floated no-shadow'\r\n                    onClick={this._removeClusterHost.bind(this)}\r\n                />\r\n                <Icon\r\n                    name='hdd outline'\r\n                    className='left floated'\r\n                    fitted\r\n                    size='large'\r\n                />\r\n                <List.Content>\r\n                    <List.Header as='a'>{hostName}</List.Header>\r\n                    <List.Description className='mt-5px'>\r\n                        {descs}\r\n                    </List.Description>\r\n                </List.Content>\r\n            </List.Item>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    removeClusterHost: (formParams, callBack) => dispatch(actions.removeClusterHost(formParams, callBack)),\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ClusterHostItem));\r\n","import React from 'react';\r\nimport {Message} from \"semantic-ui-react\";\r\nexport default class NoResultTips extends React.Component {\r\n    render() {\r\n        const {\r\n            title,\r\n            desc,\r\n            buttonText,\r\n            buttomCallback,\r\n            icon\r\n        } = this.props\r\n        return (\r\n            <Message warning\r\n            >\r\n                {title?(\r\n                    <Message.Header>{title}</Message.Header>\r\n                ):null}\r\n                <p>{desc}</p>\r\n            </Message>\r\n        );\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport actions from \"../../actions\";\r\nimport {Button, Icon, List} from 'semantic-ui-react';\r\nimport eventEmitter from \"../../commons/eventEmitter\";\r\n\r\nclass ClusterPgUserItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    _removeClusterPgUser(name) {\r\n        const {\r\n            removeClusterPgUser,\r\n            clusterName\r\n        } = this.props;\r\n\r\n        eventEmitter.emit(\r\n            'showConfirmBox',\r\n            {\r\n                content: 'Are you sure ?',\r\n                callback: (flag) => {\r\n                    if (flag) {\r\n                        removeClusterPgUser({\r\n                            name,\r\n                            clusterName\r\n                        }, backData => {\r\n\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        )\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            pgUser,\r\n        } = this.props;\r\n        return (\r\n            <List.Item className='mb-5px'>\r\n                <Button size='mini' icon='trash' basic className='right floated no-shadow'\r\n                        onClick={this._removeClusterPgUser.bind(this, pgUser.name)}\r\n                />\r\n                <Icon\r\n                    name='user'\r\n                    className='left floated'\r\n                    fitted\r\n                    size='large'\r\n                />\r\n                <List.Content>\r\n                    <List.Header as='a'>{pgUser.name}</List.Header>\r\n                    <List.Description className='mt-5px'>\r\n                        {pgUser.comment}\r\n                    </List.Description>\r\n                </List.Content>\r\n            </List.Item>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    removeClusterPgUser: (formParams, callBack) => dispatch(actions.removeClusterPgUser(formParams, callBack)),\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ClusterPgUserItem));\r\n","import React from 'react';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport actions from \"../../actions\";\r\nimport {Button, Icon, List} from 'semantic-ui-react';\r\nimport eventEmitter from \"../../commons/eventEmitter\";\r\n\r\nclass ClusterPgDatabaseItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    _removeClusterPgDatabase(name) {\r\n        const {\r\n            removeClusterPgDatabase,\r\n            clusterName\r\n        } = this.props;\r\n\r\n        eventEmitter.emit(\r\n            'showConfirmBox',\r\n            {\r\n                content: 'Are you sure ?',\r\n                callback: (flag) => {\r\n                    if (flag) {\r\n                        removeClusterPgDatabase({\r\n                            name,\r\n                            clusterName\r\n                        }, backData => {\r\n\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            pgDatabase,\r\n        } = this.props;\r\n        return (\r\n            <List.Item className='mb-5px'>\r\n                <Button size='mini' icon='trash' basic className='right floated no-shadow'\r\n                        onClick={this._removeClusterPgDatabase.bind(this, pgDatabase.name)}\r\n                />\r\n                <Icon\r\n                    name='database'\r\n                    className='left floated'\r\n                    fitted\r\n                    size='large'\r\n                />\r\n                <List.Content>\r\n                    <List.Header as='a'>{pgDatabase.name}</List.Header>\r\n                    <List.Description className='mt-5px'>\r\n                        {pgDatabase.comment}\r\n                    </List.Description>\r\n                </List.Content>\r\n            </List.Item>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    removeClusterPgDatabase: (formParams, callBack) => dispatch(actions.removeClusterPgDatabase(formParams, callBack)),\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ClusterPgDatabaseItem));\r\n","import React from 'react';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport actions from \"../../actions\";\r\nimport {Button, Card, Icon, List, Label, Header, Divider, Popup} from 'semantic-ui-react';\r\nimport ClusterHostItem from \"./clusterHostItem\";\r\nimport NoResultTips from \"../../components/noResultTips\";\r\nimport eventEmitter from \"../../commons/eventEmitter\";\r\nimport Config from \"../../config\";\r\nimport ClusterPgUserItem from \"./clusterUserItem\";\r\nimport ClusterPgDatabaseItem from \"./clusterPgDatabaseItem\";\r\nimport yaml from 'js-yaml'\r\nimport {saveLocalClusterConfig, saveLocalClusterVarsConfig} from \"../../actions/configData\";\r\n\r\nclass ClusterItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}\r\n    }\r\n\r\n    _renderHosts() {\r\n        const {\r\n            clusterData,\r\n            clusterName\r\n        } = this.props;\r\n\r\n        let renders = [];\r\n        if (clusterData?.hosts) {\r\n            renders = Object.keys(clusterData?.hosts).map((cItem, cIndex) => {\r\n                return <ClusterHostItem\r\n                    key={'key-' + cIndex}\r\n                    clusterName={clusterName}\r\n                    hostName={cItem}\r\n                    hostData={clusterData.hosts[cItem]}\r\n                />\r\n            });\r\n        }\r\n\r\n        if (renders.length === 0) {\r\n            return <NoResultTips desc={'No hosts'}/>\r\n        }\r\n\r\n        return (\r\n            <List>\r\n                {renders}\r\n            </List>\r\n        );\r\n\r\n    }\r\n\r\n\r\n    _addNewClusterHost() {\r\n        const {\r\n            clusterName,\r\n            clusterData\r\n        } = this.props;\r\n        eventEmitter.emit(\r\n            'showEditClusterHostForm',\r\n            {\r\n                editType: 'add',\r\n                clusterName,\r\n                clusterData,\r\n                callback: (flag) => {\r\n                    //console.log(flag)\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    _renderPgUsers() {\r\n        const {\r\n            clusterData,\r\n            clusterName\r\n        } = this.props;\r\n\r\n        let renders = [];\r\n        if (clusterData?.vars?.pg_users) {\r\n            renders = clusterData.vars.pg_users.map((pItem, pIndex) => {\r\n                return (\r\n                    <ClusterPgUserItem\r\n                        key={'key-' + pIndex}\r\n                        clusterName={clusterName}\r\n                        pgUser={pItem}\r\n                    />\r\n                )\r\n            })\r\n        }\r\n\r\n        if (renders.length === 0) {\r\n            return <NoResultTips desc={'No Pg user'}/>\r\n        }\r\n\r\n        return (\r\n            <List>\r\n                {renders}\r\n            </List>\r\n        );\r\n\r\n    }\r\n\r\n    _manageClusterPgUser() {\r\n        const {\r\n            clusterName,\r\n            clusterData\r\n        } = this.props;\r\n        eventEmitter.emit(\r\n            'showEditClusterPgUserForm',\r\n            {\r\n                clusterName,\r\n                clusterData,\r\n                callback: (flag) => {\r\n                    //console.log(flag)\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    _renderPgDatabases() {\r\n        const {\r\n            clusterData,\r\n            clusterName\r\n        } = this.props;\r\n\r\n        let renders = [];\r\n        if (clusterData?.vars?.pg_databases) {\r\n            renders = clusterData.vars.pg_databases.map((pItem, pIndex) => {\r\n                return (\r\n                    <ClusterPgDatabaseItem\r\n                        key={'key-' + pIndex}\r\n                        clusterName={clusterName}\r\n                        pgDatabase={pItem}\r\n                    />\r\n                )\r\n            })\r\n        }\r\n\r\n        if (renders.length === 0) {\r\n            return <NoResultTips desc={'No Pg databases'}/>\r\n        }\r\n\r\n        return (\r\n            <List>\r\n                {renders}\r\n            </List>\r\n        );\r\n\r\n    }\r\n\r\n    _addNewClusterPgDatabase(){\r\n        const {\r\n            clusterName,\r\n            clusterData\r\n        } = this.props;\r\n        eventEmitter.emit(\r\n            'showEditClusterPgDatabaseForm',\r\n            {\r\n                clusterName,\r\n                clusterData,\r\n                callback: (flag) => {\r\n                    //console.log(flag)\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    _runScript() {\r\n        const {\r\n            clusterName,\r\n            createJob\r\n        } = this.props;\r\n        eventEmitter.emit(\r\n            'showConfirmBox',\r\n            {\r\n                content: 'Are you sure run this script ?',\r\n                confirmButton: 'Run',\r\n                callback: (flag) => {\r\n                    if (flag) {\r\n                        createJob({\r\n                            cmd:'?playbook=pgsql&cluster='+clusterName,\r\n                            playbook:'pgsql',\r\n                            cluster:clusterName\r\n                        },backdata=>{\r\n                            //console.log(backdata)\r\n                            eventEmitter.emit(\r\n                                'showCmdViewer',\r\n                                {\r\n                                    jobId:backdata.data.data.id,\r\n                                    eventName: clusterName\r\n                                }\r\n                            )\r\n                        })\r\n\r\n                    }\r\n                }\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    _removeCluster() {\r\n        const {\r\n            clusterName,\r\n            removeCluster,\r\n\r\n        } = this.props;\r\n        let that = this;\r\n\r\n        eventEmitter.emit(\r\n            'showConfirmBox',\r\n            {\r\n                content: 'It will remove this cluster !',\r\n                callback: (flag) => {\r\n                    if (flag) {\r\n                        removeCluster({\r\n                            clusterName\r\n                        },backdata=>{\r\n                            if(backdata.success){\r\n                                that._saveAllYaml()\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    _editClusterVars(){\r\n        const {\r\n            clusterData,\r\n            clusterName,\r\n            saveLocalClusterVarsConfig\r\n        } = this.props;\r\n        eventEmitter.emit(\r\n            'showCodeEditor',\r\n            {\r\n                title: clusterName+ '.vars',\r\n                codeData:yaml.dump(clusterData.vars),\r\n                callback: (backdata) => {\r\n                    let JSONYaml = null;\r\n                    try {\r\n                        JSONYaml = yaml.load(backdata);\r\n                    } catch (e) {\r\n                        eventEmitter.emit('showToasts',{\r\n                            type:'error',\r\n                            msg:e.toString()\r\n                        })\r\n                    }\r\n                    if(JSONYaml){\r\n                        saveLocalClusterVarsConfig({\r\n                            configData:JSONYaml,\r\n                            clusterName\r\n                        },sbackdata=>{\r\n                            if(sbackdata.success){\r\n                                eventEmitter.emit('showToasts',{\r\n                                    type:'success',\r\n                                    msg:'save success'\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    _editClusterYaml(){\r\n        const {\r\n            clusterData,\r\n            clusterName,\r\n            saveLocalClusterConfig\r\n        } = this.props;\r\n        eventEmitter.emit(\r\n            'showCodeEditor',\r\n            {\r\n                title: clusterName,\r\n                codeData:yaml.dump(clusterData),\r\n                callback: (backdata) => {\r\n                    //console.log(backdata)\r\n                    let JSONYaml = null;\r\n                    try {\r\n                        JSONYaml = yaml.load(backdata);\r\n                    } catch (e) {\r\n                        eventEmitter.emit('showToasts',{\r\n                            type:'error',\r\n                            msg:e.toString()\r\n                        })\r\n                    }\r\n                    if(JSONYaml){\r\n                        saveLocalClusterConfig({\r\n                            configData:JSONYaml,\r\n                            clusterName\r\n                        },sbackdata=>{\r\n                            if(sbackdata.success){\r\n                                eventEmitter.emit('showToasts',{\r\n                                    type:'success',\r\n                                    msg:'save success'\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    _saveAllYaml(){\r\n        const {\r\n            configData,\r\n            saveConfigData\r\n        } = this.props;\r\n        let newJSONYaml = JSON.parse(JSON.stringify(configData));\r\n        Object.keys(newJSONYaml.all.children).map((rCItem)=>{\r\n            delete newJSONYaml.all.children[rCItem].edit\r\n        })\r\n        saveConfigData(yaml.dump(newJSONYaml),sbackData=>{\r\n            if(sbackData.data.message === 'ok'){\r\n                eventEmitter.emit('showToasts',{\r\n                    type:'success',\r\n                    msg:'save success'\r\n                })\r\n            }else {\r\n                eventEmitter.emit('showToasts',{\r\n                    type:'error',\r\n                    msg:sbackData.data.message\r\n                })\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    _destroyCluster(){\r\n        const {\r\n            clusterName,\r\n            createJob\r\n        } = this.props;\r\n        eventEmitter.emit(\r\n            'showConfirmBox',\r\n            {\r\n                content: 'Are you sure ?',\r\n                confirmButton: 'Destroy',\r\n                callback: (flag) => {\r\n                    if (flag) {\r\n                        createJob({\r\n                            cmd:'?playbook=pgsql-remove&cluster='+clusterName,\r\n                            playbook:'pgsql-remove',\r\n                            cluster:clusterName\r\n                        },backdata=>{\r\n                            eventEmitter.emit(\r\n                                'showCmdViewer',\r\n                                {\r\n                                    jobId:backdata.data.id,\r\n                                    eventName: clusterName\r\n                                }\r\n                            )\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            clusterData,\r\n            clusterName\r\n        } = this.props;\r\n        let ownHostsCount = 0;\r\n        if (clusterData.hasOwnProperty('hosts')) {\r\n            ownHostsCount = Object.keys(clusterData.hosts).length;\r\n        }\r\n        let ownPgUsersCount = 0;\r\n        if (clusterData?.vars?.pg_users) {\r\n            ownPgUsersCount = clusterData?.vars?.pg_users.length;\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <Card fluid>\r\n                    <Card.Content>\r\n                        <Icon\r\n                            name='server'\r\n                            className='left floated mr-1rem'\r\n                            size='large'\r\n                            style={{fontSize: '3rem', color: '#2680eb'}}\r\n                        />\r\n                        <div className='right floated'>\r\n                            <Button size='mini'\r\n                                    onClick={this._editClusterVars.bind(this)}\r\n                            ><Icon name='setting'/>Vars</Button>\r\n                        </div>\r\n                        <Card.Header\r\n                            style={{fontSize: '1.4em'}}\r\n                        >\r\n                            {clusterName}\r\n                        </Card.Header>\r\n                        <div className='flex-row-left'>\r\n                            <Card.Meta>\r\n                                <Label size='mini' className='no-background'>\r\n                                    <Icon name='hdd'/> {ownHostsCount}\r\n                                </Label>\r\n                                <Label size='mini' className='no-background'>\r\n                                    <Icon name='users'/> {ownPgUsersCount}\r\n                                </Label>\r\n                            </Card.Meta>\r\n                        </div>\r\n\r\n                        <Divider/>\r\n\r\n                        <div className='flex-row-between mt-1rem'>\r\n                            <Header as='h4' style={{margin:'0'}}>\r\n                                Hosts\r\n                            </Header>\r\n                            <Button size='mini'\r\n                                    onClick={this._addNewClusterHost.bind(this)}\r\n                            ><Icon name='plus'/>New Host</Button>\r\n                        </div>\r\n                        <Divider/>\r\n\r\n                        <Card.Content>\r\n                            {this._renderHosts()}\r\n                        </Card.Content>\r\n\r\n\r\n                        <div className='flex-row-between mt-1rem'>\r\n                            <Header as='h4' style={{margin:'0'}}>\r\n                                Pg Users\r\n                            </Header>\r\n                            <Button size='mini'\r\n                                    onClick={this._manageClusterPgUser.bind(this)}\r\n                            ><Icon name='plus'/>New Pg User</Button>\r\n                        </div>\r\n                        <Divider/>\r\n\r\n                        <Card.Content>\r\n                            {this._renderPgUsers()}\r\n                        </Card.Content>\r\n\r\n                        <div className='flex-row-between mt-1rem'>\r\n                            <Header as='h4' style={{margin:'0'}}>\r\n                                Pg Databases\r\n                            </Header>\r\n                            <Button size='mini'\r\n                                    onClick={this._addNewClusterPgDatabase.bind(this)}\r\n                            ><Icon name='plus'/>New Pg Database</Button>\r\n                        </div>\r\n                        <Divider/>\r\n\r\n                        <Card.Content>\r\n                            {this._renderPgDatabases()}\r\n                        </Card.Content>\r\n\r\n\r\n                    </Card.Content>\r\n                    <Card.Content extra>\r\n                        <div className='flex-row-right'>\r\n                            {clusterData.edit?(\r\n                                <Button\r\n                                    color={'orange'}\r\n                                    onClick={this._saveAllYaml.bind(this)}\r\n                                >\r\n                                    <Icon name='save'/>\r\n                                    Save\r\n                                </Button>\r\n                            ):null}\r\n\r\n                            <Popup\r\n                                content='Init cluster'\r\n                                trigger={\r\n                                    <Button\r\n                                        icon={'play'}\r\n                                        onClick={this._runScript.bind(this)}\r\n                                    >\r\n                                    </Button>\r\n                                }\r\n                            />\r\n                            <Popup\r\n                                content='Destroy cluster'\r\n                                trigger={\r\n                                    <Button\r\n                                        icon={'bomb'}\r\n                                        onClick={this._destroyCluster.bind(this)}\r\n                                    >\r\n                                    </Button>\r\n                                }\r\n                            />\r\n                            <Popup\r\n                                content='Edit cluster Yaml'\r\n                                trigger={\r\n                                    <Button\r\n                                        icon={'code'}\r\n                                        onClick={this._editClusterYaml.bind(this)}\r\n                                    >\r\n                                    </Button>\r\n                                }\r\n                            />\r\n                            <Popup\r\n                                content='Delete cluster'\r\n                                trigger={\r\n                                    <Button\r\n                                        icon={'trash'}\r\n                                        onClick={this._removeCluster.bind(this)}\r\n                                    >\r\n                                    </Button>\r\n                                }\r\n                            />\r\n                        </div>\r\n                    </Card.Content>\r\n                </Card>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n    configData:state.configData\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    removeCluster: (formParams, callBack) => dispatch(actions.removeCluster(formParams, callBack)),\r\n    addNewClusterHost: (formParams, callBack) => dispatch(actions.addNewClusterHost(formParams, callBack)),\r\n    saveLocalClusterVarsConfig: (formParams, callBack) => dispatch(actions.saveLocalClusterVarsConfig(formParams, callBack)),\r\n    saveLocalClusterConfig: (formParams, callBack) => dispatch(actions.saveLocalClusterConfig(formParams, callBack)),\r\n    saveConfigData: (formParams, callBack) => dispatch(actions.saveConfigData(formParams, callBack)),\r\n    createJob: (formParams, callBack) => dispatch(actions.createJob(formParams, callBack)),\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ClusterItem));\r\n","import React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {Button, Icon} from \"semantic-ui-react\";\r\nimport ClusterItem from './clusterItem';\r\nimport eventEmitter from \"../../commons/eventEmitter\";\r\n\r\nclass DashBoardPage extends React.Component {\r\n\r\n    _renderClusters(){\r\n        const {\r\n            configData\r\n        } = this.props;\r\n        let renders = Object.keys(configData.all.children).map((cKeyItem,cKeyIndex)=>{\r\n            let clusterItem = configData.all.children[cKeyItem];\r\n            return <ClusterItem\r\n                key={'key-'+cKeyIndex}\r\n                clusterData={clusterItem}\r\n                clusterName={cKeyItem}\r\n            />\r\n        })\r\n\r\n        return renders;\r\n\r\n    }\r\n\r\n    _addNewCluster(){\r\n        eventEmitter.emit(\r\n            'showEditClusterForm',\r\n            {\r\n                editType:'add',\r\n                callback:(flag)=>{\r\n                    //console.log(flag)\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className='page-wrap'>\r\n                    <div className='flex-row-right mb-1rem'>\r\n                        <Button\r\n                            primary\r\n                            onClick={this._addNewCluster.bind(this)}\r\n                        >\r\n                            <Icon name='plus' />New Cluster\r\n                        </Button>\r\n                    </div>\r\n                    <div>\r\n                        {this._renderClusters()}\r\n                    </div>\r\n                </div>\r\n\r\n            </React.Fragment>\r\n\r\n\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state, props) => ({\r\n    //account: state.account,\r\n    configData:state.configData\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DashBoardPage);\r\n","import React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {Button, Form, Input} from \"semantic-ui-react\";\r\nimport './index.css'\r\n\r\nimport eventEmitter from \"../../commons/eventEmitter\";\r\nimport Config from \"../../config\";\r\n\r\nclass InfraProvision extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cmd:''\r\n        }\r\n    }\r\n\r\n    runScript(){\r\n        const {\r\n            cmd\r\n        } = this.state;\r\n        eventEmitter.emit(\r\n            'showConfirmBox',\r\n            {\r\n                content:'Are you sure run this script ?',\r\n                confirmButton:'Run',\r\n                callback:(flag)=>{\r\n                    if(flag){\r\n                        eventEmitter.emit(\r\n                            'showCmdViewer',\r\n                            {\r\n                                sseUrl:Config.officialServerUrl+'/api/v1/infra '+cmd,\r\n                                eventName: 'pigsty-cli'\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {} = this.props\r\n        return (\r\n            <div className='playbook-item'>\r\n                <div className='playbook-item-intro'>\r\n                    <h1>Infra Provision</h1>\r\n                    <div className=\"lead\">How to pull up infrasturcture on meta node</div>\r\n\r\n                    <h2 id=\"overview\">Overview</h2>\r\n                    <p>Infrastructure initialization is done via <a\r\n                        href=\"https://github.com/Vonng/pigsty/blob/master/infra.yml\"><code>infra.yml</code></a>. The script\r\n                        completes the installation and deployment of <strong>infrastructure</strong> on the <strong>meta\r\n                            node</strong>.</p>\r\n                    <p>``infra.yml<code>takes the metanode (default group name</code>meta`) as the deployment target.</p>\r\n                    <div className=\"highlight\"><pre><code\r\n                        className=\"language-bash\" data-lang=\"bash\">. /infra.yml\r\n</code></pre>\r\n                    </div>\r\n                    <p>! <a href=\"/img/play/infra.svg\"></a></p>\r\n                    <h2 id=\"caution\">Caution</h2>\r\n                    <p><strong>❗️ The initialization of the meta node must be completed before the initialization of the\r\n                        database node can be executed properly</strong></p>\r\n                    <p><code>infra.yml</code> is fixed to work on the group named <a\r\n                        href=\"https://github.com/Vonng/pigsty/blob/master/pigsty.yml#L32\"><code>meta</code></a> in the\r\n                        configuration file</p>\r\n                    <p><strong>meta nodes</strong> can be reused as <strong>normal nodes</strong>, i.e. PostgreSQL databases\r\n                        can be defined and created on meta nodes as well.</p>\r\n                    <p>Pigsty recommends using the default configuration and creating a cluster of <a\r\n                        href=\"https://github.com/Vonng/pigsty/blob/master/pigsty.yml#L43\"><code>pg-meta</code></a> meta-databases\r\n                        on the meta-nodes for hosting Pigsty advanced features.</p>\r\n                    <p>A complete execution of the initialization process can take 2 to 8 minutes, depending on the machine\r\n                        configuration.</p>\r\n                    <h2 id=\"selective-execution\">Selective execution</h2>\r\n                    <p>Users can <strong>selectively execute</strong> a subset of scripts through ansible&rsquo;s tagging\r\n                        mechanism.</p>\r\n                    <p>For example, if you want to execute only the local source initialization part, you can do so with the\r\n                        following command.</p>\r\n                    <div className=\"highlight\"><pre><code\r\n                        className=\"language-bash\" data-lang=\"bash\">. /infra.yml --tags<span>=</span>repo\r\n</code></pre>\r\n                    </div>\r\n                    <p>Please refer to [<strong>task details</strong>](#task details) for specific tags</p>\r\n                    <p>Some common subsets of tasks include.</p>\r\n                    <div className=\"highlight\"><pre><code\r\n                        className=\"language-bash\"\r\n                        data-lang=\"bash\">. /infra.yml --tags<span>=</span>repo -e <span>repo_rebuild</span><span>=</span>\r\n                    <span>true</span>\r\n                    <span># Force a local source to be recreated</span>\r\n. /infra.yml --tags<span>=</span>prometheus_reload <span\r\n                        ># Reload Prometheus configuration</span>\r\n. /infra.yml --tags<span>=</span>nginx_haproxy <span\r\n                        ># Regenerate the Nginx Haproxy index page</span>\r\n. /infra.yml --tags<span>=</span>prometheus_targets,prometheus_reload <span\r\n                        ># Regenerate the Prometheus static monitoring object file and apply</span>\r\n</code></pre>\r\n                    </div>\r\n                    <h2 id=\"script-description\">script description</h2>\r\n                    <p><a href=\"https://github.com/Vonng/pigsty/blob/master/infra.yml\"><code>infra.yml</code></a> does the\r\n                        following stuff:</p>\r\n                    <ul>\r\n                        <li>Deploy and enable local sources</li>\r\n                        <li>Complete metanode initialization</li>\r\n                        <li>Complete meta-node infrastructure initialization\r\n                            <ul>\r\n                                <li>CA infrastructure</li>\r\n                                <li>DNS Nameserver</li>\r\n                                <li>Nginx</li>\r\n                                <li>Prometheus &amp; Alertmanger</li>\r\n                                <li>Grafana</li>\r\n                            </ul>\r\n                        </li>\r\n                        <li>Copy the Pigsty ontology to the meta node</li>\r\n                        <li>Complete database initialization on the meta node (optional, users can reuse the meta node\r\n                            through the standard database cluster initialization process)\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <Form className='playbook-item-run-script'>\r\n                    <Form.Field>\r\n                        <label>Run Script</label>\r\n                        <Form.Group inline>\r\n                            <code className='code' style={{width: '12rem'}}>./infra.yml </code>\r\n                            <Input fluid\r\n                                   className='code'\r\n                                   placeholder='--tags='\r\n                                   onChange={(e,{name,value})=>{\r\n                                       this.setState({\r\n                                           cmd:value\r\n                                       })\r\n                                   }}\r\n                            />\r\n                            <Button primary type='submit'\r\n                                    onClick={this.runScript.bind(this)}\r\n                            >Run</Button>\r\n                        </Form.Group>\r\n                    </Form.Field>\r\n                </Form>\r\n\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({});\r\nconst mapDispatchToProps = dispatch => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InfraProvision);\r\n","import React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {Button, Form, Input, Select} from \"semantic-ui-react\";\r\nimport './index.css'\r\n\r\nimport eventEmitter from \"../../commons/eventEmitter\";\r\nimport Config from \"../../config\";\r\n\r\nclass PgsqlProvision extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            clusterName:'',\r\n            cmd:''\r\n        }\r\n    }\r\n\r\n    runScript() {\r\n        const {\r\n            clusterName,\r\n            cmd\r\n        } = this.state;\r\n        if(clusterName.length === 0 ){\r\n            return false;\r\n        }\r\n        eventEmitter.emit(\r\n            'showConfirmBox',\r\n            {\r\n                content:'Are you sure run this script ?',\r\n                confirmButton:'Run',\r\n                callback:(flag)=>{\r\n                    if(flag){\r\n                        eventEmitter.emit(\r\n                            'showCmdViewer',\r\n                            {\r\n                                sseUrl:Config.officialServerUrl+'/api/v1/pgsql -l '+clusterName+' '+cmd,\r\n                                eventName:clusterName\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            configData\r\n        } = this.props;\r\n\r\n        const options = Object.keys(configData.all.children).map(cItem => {\r\n            return {\r\n                key: cItem,\r\n                text: cItem,\r\n                value: cItem\r\n            }\r\n        })\r\n        return (\r\n            <div className='playbook-item'>\r\n                <div className='playbook-item-intro'>\r\n                    <h1>Pgsql Provision</h1>\r\n                    <div className=\"lead\">How to define and create postgres clusters?</div>\r\n                </div>\r\n\r\n                <Form className='playbook-item-run-script'>\r\n                    <Form.Field>\r\n                        <label>Run Script</label>\r\n                        <Form.Group inline>\r\n                            <code className='code' style={{width: '18rem'}}>./pgsql.yml\r\n                                -l </code>\r\n                            <Select className='code' style={{width: '14rem'}} compact options={options}\r\n                                    onChange={(e,{name,value})=>{\r\n                                        this.setState({\r\n                                            clusterName:value\r\n                                        })\r\n                                    }}\r\n                            />\r\n                            <Input fluid\r\n                                   className='code'\r\n                                   placeholder='--tags='\r\n                                   onChange={(e,{name,value})=>{\r\n                                       this.setState({\r\n                                           cmd:value\r\n                                       })\r\n                                   }}\r\n                            />\r\n                            <Button primary type='submit'\r\n                                onClick={this.runScript.bind(this)}\r\n                            >Run</Button>\r\n                        </Form.Group>\r\n                    </Form.Field>\r\n                </Form>\r\n\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n    configData: state.configData\r\n});\r\nconst mapDispatchToProps = dispatch => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PgsqlProvision);\r\n","import React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {Button, Form, Input} from \"semantic-ui-react\";\r\nimport './index.css'\r\n\r\nimport eventEmitter from \"../../commons/eventEmitter\";\r\nimport Config from \"../../config\";\r\n\r\nclass SandboxProvision extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cmd:''\r\n        }\r\n    }\r\n\r\n    runScript(){\r\n        const {\r\n            cmd\r\n        } = this.state;\r\n        eventEmitter.emit(\r\n            'showConfirmBox',\r\n            {\r\n                content:'Are you sure run this script ?',\r\n                confirmButton:'Run',\r\n                callback:(flag)=>{\r\n                    if(flag){\r\n                        eventEmitter.emit(\r\n                            'showCmdViewer',\r\n                            {\r\n                                sseUrl:Config.officialServerUrl+'/api/v1/sandbox '+cmd,\r\n                                eventName: 'pigsty-cli'\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {} = this.props\r\n        return (\r\n            <div className='playbook-item'>\r\n                <div className='playbook-item-intro'>\r\n                    <h1>Sandbox Provision</h1>\r\n                    <div className=\"lead\">How to perform one-pass bootstrap for sandbox?</div>\r\n\r\n                </div>\r\n\r\n\r\n                <Form className='playbook-item-run-script'>\r\n                    <Form.Field>\r\n                        <label>Run Script</label>\r\n                        <Form.Group inline>\r\n                            <code className='code' style={{width: '12rem'}}>./sandbox.yml </code>\r\n                            <Input fluid\r\n                                   className='code'\r\n                                   placeholder='--tags='\r\n                                   onChange={(e,{name,value})=>{\r\n                                       this.setState({\r\n                                           cmd:value\r\n                                       })\r\n                                   }}\r\n                            />\r\n                            <Button primary type='submit'\r\n                                    onClick={this.runScript.bind(this)}\r\n                            >Run</Button>\r\n                        </Form.Group>\r\n                    </Form.Field>\r\n                </Form>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({});\r\nconst mapDispatchToProps = dispatch => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SandboxProvision);\r\n","import React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {Button, Form, Input, Select} from \"semantic-ui-react\";\r\nimport './index.css'\r\n\r\nimport eventEmitter from \"../../commons/eventEmitter\";\r\nimport Config from \"../../config\";\r\n\r\nclass RemoveClusters extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            clusterName: '',\r\n            cmd: ''\r\n        }\r\n    }\r\n\r\n    runScript() {\r\n        const {\r\n            clusterName,\r\n            cmd\r\n        } = this.state;\r\n        if (clusterName.length === 0) {\r\n            return false;\r\n        }\r\n        eventEmitter.emit(\r\n            'showConfirmBox',\r\n            {\r\n                content: 'Are you sure run this script ?',\r\n                confirmButton: 'Run',\r\n                callback: (flag) => {\r\n                    if (flag) {\r\n                        eventEmitter.emit(\r\n                            'showCmdViewer',\r\n                            {\r\n                                sseUrl: Config.officialServerUrl + '/api/v1/pgsql-remove -l ' + clusterName + ' ' + cmd,\r\n                                eventName: clusterName\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            configData\r\n        } = this.props;\r\n\r\n        const options = Object.keys(configData.all.children).map(cItem => {\r\n            return {\r\n                key: cItem,\r\n                text: cItem,\r\n                value: cItem\r\n            }\r\n        })\r\n        return (\r\n            <div className='playbook-item'>\r\n                <div className='playbook-item-intro'>\r\n                    <h1>Remove Clusters</h1>\r\n                    <div className=\"lead\">How to destroy postgres clusters and instances</div>\r\n\r\n                </div>\r\n\r\n                <Form className='playbook-item-run-script'>\r\n                    <Form.Field>\r\n                        <label>Run Script</label>\r\n                        <Form.Group inline>\r\n                            <code className='code' style={{width: '32rem'}}>./pgsql-remove.yml\r\n                                -l </code>\r\n                            <Select className='code' style={{width: '14rem'}} compact options={options}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this.setState({\r\n                                            clusterName: value\r\n                                        })\r\n                                    }}\r\n                            />\r\n                            <Input fluid\r\n                                   className='code'\r\n                                   placeholder='--tags='\r\n                                   onChange={(e, {name, value}) => {\r\n                                       this.setState({\r\n                                           cmd: value\r\n                                       })\r\n                                   }}\r\n                            />\r\n                            <Button primary type='submit'\r\n                                    onClick={this.runScript.bind(this)}\r\n                            >Run</Button>\r\n                        </Form.Group>\r\n                    </Form.Field>\r\n                </Form>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n    configData: state.configData\r\n});\r\nconst mapDispatchToProps = dispatch => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RemoveClusters);\r\n","import React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {Button, Form, Input, Select} from \"semantic-ui-react\";\r\nimport './index.css'\r\n\r\nimport eventEmitter from \"../../commons/eventEmitter\";\r\nimport Config from \"../../config\";\r\n\r\nclass MonitorOnly extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            clusterName: '',\r\n            cmd: ''\r\n        }\r\n    }\r\n\r\n    runScript() {\r\n        const {\r\n            clusterName,\r\n            cmd\r\n        } = this.state;\r\n        if (clusterName.length === 0) {\r\n            return false;\r\n        }\r\n        eventEmitter.emit(\r\n            'showConfirmBox',\r\n            {\r\n                content: 'Are you sure run this script ?',\r\n                confirmButton: 'Run',\r\n                callback: (flag) => {\r\n                    if (flag) {\r\n                        eventEmitter.emit(\r\n                            'showCmdViewer',\r\n                            {\r\n                                sseUrl: Config.officialServerUrl + '/api/v1/pgsql-monitor -l ' + clusterName + ' ' + cmd,\r\n                                eventName: clusterName\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            configData\r\n        } = this.props;\r\n\r\n        const options = Object.keys(configData.all.children).map(cItem => {\r\n            return {\r\n                key: cItem,\r\n                text: cItem,\r\n                value: cItem\r\n            }\r\n        })\r\n        return (\r\n            <div className='playbook-item'>\r\n                <div className='playbook-item-intro'>\r\n                    <h1>Monitor Only</h1>\r\n                    <div className=\"lead\">How to deploy pigsty monitoring system without provisioning solution?</div>\r\n\r\n                </div>\r\n\r\n                <Form className='playbook-item-run-script'>\r\n                    <Form.Field>\r\n                        <label>Run Script</label>\r\n                        <Form.Group inline>\r\n                            <code className='code' style={{width: '32rem'}}>./pgsql-monitor.yml\r\n                                -l </code>\r\n                            <Select className='code' style={{width: '14rem'}} compact options={options}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this.setState({\r\n                                            clusterName: value\r\n                                        })\r\n                                    }}\r\n                            />\r\n                            <Input fluid\r\n                                   className='code'\r\n                                   placeholder='--tags='\r\n                                   onChange={(e, {name, value}) => {\r\n                                       this.setState({\r\n                                           cmd: value\r\n                                       })\r\n                                   }}\r\n                            />\r\n                            <Button primary type='submit'\r\n                                    onClick={this.runScript.bind(this)}\r\n                            >Run</Button>\r\n                        </Form.Group>\r\n                    </Form.Field>\r\n                </Form>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n    configData: state.configData\r\n});\r\nconst mapDispatchToProps = dispatch => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MonitorOnly);\r\n","import React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {Button, Form, Input, Select} from \"semantic-ui-react\";\r\nimport './index.css'\r\n\r\nimport eventEmitter from \"../../commons/eventEmitter\";\r\nimport Config from \"../../config\";\r\n\r\nclass CreateUser extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            clusterName: '',\r\n            cmd: ''\r\n        }\r\n    }\r\n\r\n    runScript() {\r\n        const {\r\n            clusterName,\r\n            cmd\r\n        } = this.state;\r\n        if (clusterName.length === 0) {\r\n            return false;\r\n        }\r\n        eventEmitter.emit(\r\n            'showConfirmBox',\r\n            {\r\n                content: 'Are you sure run this script ?',\r\n                confirmButton: 'Run',\r\n                callback: (flag) => {\r\n                    if (flag) {\r\n                        eventEmitter.emit(\r\n                            'showCmdViewer',\r\n                            {\r\n                                sseUrl: Config.officialServerUrl + '/api/v1/pgsql-createuser -l ' + clusterName + ' ' + cmd,\r\n                                eventName: clusterName\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            configData\r\n        } = this.props;\r\n\r\n        const options = Object.keys(configData.all.children).map(cItem => {\r\n            return {\r\n                key: cItem,\r\n                text: cItem,\r\n                value: cItem\r\n            }\r\n        })\r\n        return (\r\n            <div className='playbook-item'>\r\n                <div className='playbook-item-intro'>\r\n                    <h1>Create User</h1>\r\n                    <div className=\"lead\">How to perform one-pass bootstrap for sandbox?</div>\r\n\r\n                </div>\r\n\r\n                <Form className='playbook-item-run-script'>\r\n                    <Form.Field>\r\n                        <label>Run Script</label>\r\n                        <Form.Group inline>\r\n                            <code className='code' style={{width: '33rem'}}>./pgsql-createuser.yml\r\n                                -l </code>\r\n                            <Select className='code' style={{width: '14rem'}} compact options={options}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this.setState({\r\n                                            clusterName: value\r\n                                        })\r\n                                    }}\r\n                            />\r\n                            <Input fluid\r\n                                   className='code'\r\n                                   placeholder='--tags='\r\n                                   onChange={(e, {name, value}) => {\r\n                                       this.setState({\r\n                                           cmd: value\r\n                                       })\r\n                                   }}\r\n                            />\r\n                            <Button primary type='submit'\r\n                                    onClick={this.runScript.bind(this)}\r\n                            >Run</Button>\r\n                        </Form.Group>\r\n                    </Form.Field>\r\n                </Form>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n    configData: state.configData\r\n});\r\nconst mapDispatchToProps = dispatch => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateUser);\r\n","import React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {Button, Form, Input, Select} from \"semantic-ui-react\";\r\nimport './index.css'\r\n\r\nimport eventEmitter from \"../../commons/eventEmitter\";\r\nimport Config from \"../../config\";\r\n\r\nclass CreateDatabase extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            clusterName: '',\r\n            cmd: ''\r\n        }\r\n    }\r\n\r\n    runScript() {\r\n        const {\r\n            clusterName,\r\n            cmd\r\n        } = this.state;\r\n        if (clusterName.length === 0) {\r\n            return false;\r\n        }\r\n        eventEmitter.emit(\r\n            'showConfirmBox',\r\n            {\r\n                content: 'Are you sure run this script ?',\r\n                confirmButton: 'Run',\r\n                callback: (flag) => {\r\n                    if (flag) {\r\n                        eventEmitter.emit(\r\n                            'showCmdViewer',\r\n                            {\r\n                                sseUrl: Config.officialServerUrl + '/api/v1/pgsql-createdb -l ' + clusterName + ' ' + cmd,\r\n                                eventName: clusterName\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            configData\r\n        } = this.props;\r\n\r\n        const options = Object.keys(configData.all.children).map(cItem => {\r\n            return {\r\n                key: cItem,\r\n                text: cItem,\r\n                value: cItem\r\n            }\r\n        })\r\n        return (\r\n            <div className='playbook-item'>\r\n                <div className='playbook-item-intro'>\r\n                    <h1>Create Database</h1>\r\n                    <div className=\"lead\">How to create new database on running clusters?</div>\r\n\r\n                </div>\r\n\r\n\r\n                <Form className='playbook-item-run-script'>\r\n                    <Form.Field>\r\n                        <label>Run Script</label>\r\n                        <Form.Group inline>\r\n                            <code className='code' style={{width: '32rem'}}>./pgsql-createdb.yml\r\n                                -l </code>\r\n                            <Select className='code' style={{width: '14rem'}} compact options={options}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this.setState({\r\n                                            clusterName: value\r\n                                        })\r\n                                    }}\r\n                            />\r\n                            <Input fluid\r\n                                   className='code'\r\n                                   placeholder='--tags='\r\n                                   onChange={(e, {name, value}) => {\r\n                                       this.setState({\r\n                                           cmd: value\r\n                                       })\r\n                                   }}\r\n                            />\r\n                            <Button primary type='submit'\r\n                                    onClick={this.runScript.bind(this)}\r\n                            >Run</Button>\r\n                        </Form.Group>\r\n                    </Form.Field>\r\n                </Form>\r\n\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n    configData: state.configData\r\n});\r\nconst mapDispatchToProps = dispatch => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateDatabase);\r\n","import React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {Button, Form, Input, Select} from \"semantic-ui-react\";\r\nimport './index.css'\r\n\r\nimport eventEmitter from \"../../commons/eventEmitter\";\r\nimport Config from \"../../config\";\r\n\r\nclass ServiceProvision extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            clusterName: '',\r\n            cmd: ''\r\n        }\r\n    }\r\n\r\n    runScript() {\r\n        const {\r\n            clusterName,\r\n            cmd\r\n        } = this.state;\r\n        if (clusterName.length === 0) {\r\n            return false;\r\n        }\r\n        eventEmitter.emit(\r\n            'showConfirmBox',\r\n            {\r\n                content: 'Are you sure run this script ?',\r\n                confirmButton: 'Run',\r\n                callback: (flag) => {\r\n                    if (flag) {\r\n                        eventEmitter.emit(\r\n                            'showCmdViewer',\r\n                            {\r\n                                sseUrl: Config.officialServerUrl + '/api/v1/pgsql-service -l ' + clusterName + ' ' + cmd,\r\n                                eventName: clusterName\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            configData\r\n        } = this.props;\r\n\r\n        const options = Object.keys(configData.all.children).map(cItem => {\r\n            return {\r\n                key: cItem,\r\n                text: cItem,\r\n                value: cItem\r\n            }\r\n        })\r\n        return (\r\n            <div className='playbook-item'>\r\n                <div className='playbook-item-intro'>\r\n                    <h1>Service Provision</h1>\r\n                    <div className=\"lead\">How to perform one-pass bootstrap for sandbox?</div>\r\n\r\n                </div>\r\n\r\n\r\n                <Form className='playbook-item-run-script'>\r\n                    <Form.Field>\r\n                        <label>Run Script</label>\r\n                        <Form.Group inline>\r\n                            <code className='code' style={{width: '32rem'}}>./pgsql-service.yml\r\n                                -l </code>\r\n                            <Select className='code' style={{width: '14rem'}} compact options={options}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this.setState({\r\n                                            clusterName: value\r\n                                        })\r\n                                    }}\r\n                            />\r\n                            <Input fluid\r\n                                   className='code'\r\n                                   placeholder='--tags='\r\n                                   onChange={(e, {name, value}) => {\r\n                                       this.setState({\r\n                                           cmd: value\r\n                                       })\r\n                                   }}\r\n                            />\r\n                            <Button primary type='submit'\r\n                                    onClick={this.runScript.bind(this)}\r\n                            >Run</Button>\r\n                        </Form.Group>\r\n                    </Form.Field>\r\n                </Form>\r\n\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n    configData: state.configData\r\n});\r\nconst mapDispatchToProps = dispatch => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ServiceProvision);\r\n","import React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {Button,Tab} from \"semantic-ui-react\";\r\nimport './index.css'\r\nimport InfraProvision from \"./infraProvision\";\r\nimport PgsqlProvision from \"./pgsqlProvision\";\r\nimport SandboxProvision from \"./sandboxProvision\";\r\nimport RemoveClusters from \"./removeClusters\";\r\nimport MonitorOnly from \"./monitorOnly\";\r\nimport CreateUser from \"./createUser\";\r\nimport CreateDatabase from \"./createDatabase\";\r\nimport ServiceProvision from \"./serviceProvision\";\r\n\r\nconst panes = [\r\n    {\r\n        menuItem: { key: 'infraProvision', icon: 'arrow alternate circle right outline', content: 'Infra Provision' },//'Infra Provision',\r\n        render: () => <Tab.Pane className='playbook-pane'><InfraProvision/></Tab.Pane> },\r\n    {\r\n        menuItem: { key: 'pgsqlProvision', icon: 'arrow alternate circle right outline', content: 'Pgsql Provision' },//'Pgsql Provision',\r\n        render: () => <Tab.Pane className='playbook-pane'><PgsqlProvision/></Tab.Pane> },\r\n    {\r\n        menuItem: { key: 'sandboxProvision', icon: 'arrow alternate circle right outline', content: 'Sandbox Provision' },//'Sandbox Provision',\r\n        render: () => <Tab.Pane className='playbook-pane'><SandboxProvision/></Tab.Pane> },\r\n    {\r\n        menuItem: { key: 'removeClusters', icon: 'arrow alternate circle right outline', content: 'Remove Clusters' },//'Remove Clusters',\r\n        render: () => <Tab.Pane className='playbook-pane'><RemoveClusters/></Tab.Pane> },\r\n    {\r\n        menuItem: { key: 'monitorOnly', icon: 'arrow alternate circle right outline', content: 'Monitor Only' },//'Monitor Only',\r\n        render: () => <Tab.Pane className='playbook-pane'><MonitorOnly/></Tab.Pane> },\r\n    {\r\n        menuItem: { key: 'createUser', icon: 'arrow alternate circle right outline', content: 'Create User' },//'Create User',\r\n        render: () => <Tab.Pane className='playbook-pane'><CreateUser/></Tab.Pane> },\r\n    {\r\n        menuItem: { key: 'createDatabase', icon: 'arrow alternate circle right outline', content: 'Create Database' },//'Create Database',\r\n        render: () => <Tab.Pane className='playbook-pane'><CreateDatabase/></Tab.Pane> },\r\n    {\r\n        menuItem: { key: 'serviceProvision', icon: 'arrow alternate circle right outline', content: 'Service Provision' },//'Service Provision',\r\n        render: () => <Tab.Pane className='playbook-pane'><ServiceProvision/></Tab.Pane> },\r\n]\r\n\r\nclass PlaybookPage extends React.Component {\r\n    render() {\r\n        const {\r\n        } = this.props\r\n        return (\r\n            <div className='page-wrap playbook'>\r\n                <Tab menu={{ fluid: true, vertical: true, tabular: true }} panes={panes} />\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state, props) => ({\r\n\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaybookPage);\r\n","import React from 'react';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {Button,Divider,Icon} from \"semantic-ui-react\";\r\nimport CodeMirror from '@uiw/react-codemirror';\r\nimport 'codemirror/addon/display/autorefresh';\r\nimport 'codemirror/addon/comment/comment';\r\nimport 'codemirror/addon/edit/matchbrackets';\r\nimport 'codemirror/keymap/sublime';\r\nimport 'codemirror/theme/monokai.css';\r\nimport './codeViewer.css';\r\nimport yaml from 'js-yaml'\r\nimport actions from \"../actions\";\r\nimport eventEmitter from \"../commons/eventEmitter\";\r\nclass CodeViewer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.codeM = null;\r\n    }\r\n\r\n    _goToPlaybook(){\r\n        const {\r\n            history,\r\n        } = this.props;\r\n        history.push('/playbook');\r\n    }\r\n\r\n    _saveYaml(){\r\n        const {\r\n            saveLocalConfigData,\r\n            saveConfigData\r\n        } = this.props;\r\n\r\n        let JSONYaml = null;\r\n        try {\r\n            JSONYaml = yaml.load(this.codeM.editor.getValue());\r\n        } catch (e) {\r\n            eventEmitter.emit('showToasts',{\r\n                type:'error',\r\n                msg:e.toString()\r\n            })\r\n        }\r\n        if(JSONYaml){\r\n            saveLocalConfigData({\r\n                data:JSONYaml\r\n            },(backData)=>{\r\n                if(backData.success){\r\n                    let newJSONYaml = JSON.parse(JSON.stringify(JSONYaml));\r\n                    Object.keys(newJSONYaml.all.children).map((rCItem)=>{\r\n                        delete newJSONYaml.all.children[rCItem].edit\r\n                    })\r\n                    saveConfigData(yaml.dump(newJSONYaml),sbackData=>{\r\n                        //console.log(sbackData);\r\n                        if(sbackData.data.message === 'ok'){\r\n                            eventEmitter.emit('showToasts',{\r\n                                type:'success',\r\n                                msg:'save success'\r\n                            })\r\n                        }else {\r\n                            eventEmitter.emit('showToasts',{\r\n                                type:'error',\r\n                                msg:sbackData.data.message\r\n                            })\r\n                        }\r\n\r\n                    })\r\n                }\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            configData\r\n        } = this.props;\r\n        let that = this;\r\n        let renderConfigData = JSON.parse(JSON.stringify(configData));\r\n        Object.keys(renderConfigData.all.children).map((rCItem)=>{\r\n            delete renderConfigData.all.children[rCItem].edit\r\n        })\r\n        let yamlCode = yaml.dump(renderConfigData);\r\n        //console.log(yamlCode)\r\n        return (\r\n            <div>\r\n                <div className=\"codeViewer\">\r\n                    <CodeMirror\r\n                        ref={_ref=>{\r\n                            if(_ref?.editor){\r\n                                //if(_ref.hasOwnProperty('editor'))\r\n                                that.codeM = _ref;\r\n                            }\r\n                        }}\r\n                        value={yamlCode}\r\n                        options={{\r\n                            theme: 'monokai',\r\n                            tabSize: 2,\r\n                            keyMap: 'sublime',\r\n                            mode: 'yaml',\r\n                            //readOnly:'nocursor',\r\n                            //autofocus:false\r\n                        }}\r\n                    />\r\n                </div>\r\n                <Divider/>\r\n                <div>\r\n                    <Button primary onClick={this._saveYaml.bind(this)}>Save YAML</Button>\r\n                    <Button onClick={this._goToPlaybook.bind(this)}><Icon name='paper plane outline' />Go to Playbook</Button>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n    configData:state.configData\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    saveLocalConfigData: (formParams, callBack) => dispatch(actions.saveLocalConfigData(formParams, callBack)),\r\n    saveConfigData: (formParams, callBack) => dispatch(actions.saveConfigData(formParams, callBack)),\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CodeViewer));\r\n","import React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {Tab} from \"semantic-ui-react\";\r\nimport './index.css'\r\nimport CodeViewer from \"../../components/codeViewer\";\r\n\r\n\r\nconst panes = [\r\n    // {\r\n    //     menuItem: { key: 'ConfigForm', icon: 'edit outline', content: 'Config Editor' },//'Config Form',\r\n    //     render: () => <Tab.Pane><ConfigForm/></Tab.Pane>,\r\n    // },\r\n    {\r\n        menuItem: { key: 'YAML', icon: 'code', content: 'YAML' },//'YAML',\r\n        render: () => <Tab.Pane><CodeViewer/></Tab.Pane>,\r\n    },\r\n]\r\n\r\nclass PigstyConfigPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        const {\r\n        } = this.props;\r\n\r\n        return (\r\n            <div className='page-wrap pigsty-config'>\r\n                <Tab panes={panes} />\r\n            </div>\r\n\r\n        )\r\n        /**\r\n        return (\r\n            <div>\r\n                <div>Global Vars</div>\r\n                <div>Children</div>\r\n                <Repo />\r\n                <div>\r\n                    <List>\r\n                        <List.Item>\r\n                            <List.Icon name='All' />\r\n                            <List.Content>\r\n                                <List.Header>vars</List.Header>\r\n                                <List.Description>Source files for project</List.Description>\r\n                                <List.List>\r\n                                    <List.Item>\r\n                                        <List.Icon name='folder' />\r\n                                        <List.Content>\r\n                                            <List.Header as={'a'} href={'http://www.baidu.com'}>proxy_env</List.Header>\r\n                                            <List.Description>Your site's theme</List.Description>\r\n                                        </List.Content>\r\n                                    </List.Item>\r\n                                    <List.Item>\r\n                                        <List.Icon name='folder' />\r\n                                        <List.Content>\r\n                                            <List.Header as={'a'} href={'http://www.baidu.com'}>repo_enabled</List.Header>\r\n                                            <List.Description>Your site's theme</List.Description>\r\n                                        </List.Content>\r\n                                    </List.Item>\r\n                                    <List.Item>\r\n                                        <List.Icon name='folder' />\r\n                                        <List.Content>\r\n                                            <List.Header as={'a'} href={'http://www.baidu.com'}>repo_name</List.Header>\r\n                                            <List.Description>Your site's theme</List.Description>\r\n                                        </List.Content>\r\n                                    </List.Item>\r\n                                    <List.Item>\r\n                                        <List.Icon name='folder' />\r\n                                        <List.Content>\r\n                                            <List.Header as={'a'} href={'http://www.baidu.com'}>repo_address</List.Header>\r\n                                            <List.Description>Your site's theme</List.Description>\r\n                                        </List.Content>\r\n                                    </List.Item>\r\n                                    <List.Item>\r\n                                        <List.Icon name='folder' />\r\n                                        <List.Content>\r\n                                            <List.Header as={'a'} href={'http://www.baidu.com'}>repo_port</List.Header>\r\n                                            <List.Description>Your site's theme</List.Description>\r\n                                        </List.Content>\r\n                                    </List.Item>\r\n                                    <List.Item>\r\n                                        <List.Icon name='folder' />\r\n                                        <List.Content>\r\n                                            <List.Header>repo</List.Header>\r\n                                            <List.Description>Packaged theme files</List.Description>\r\n                                            <List.List>\r\n                                                <List.Item>\r\n                                                    <List.Icon name='folder' />\r\n                                                    <List.Content>\r\n                                                        <List.Header>default</List.Header>\r\n                                                        <List.Description>Default packaged theme</List.Description>\r\n                                                    </List.Content>\r\n                                                </List.Item>\r\n                                                <List.Item>\r\n                                                    <List.Icon name='folder' />\r\n                                                    <List.Content>\r\n                                                        <List.Header>my_theme</List.Header>\r\n                                                        <List.Description>\r\n                                                            Packaged themes are also available in this folder\r\n                                                        </List.Description>\r\n                                                    </List.Content>\r\n                                                </List.Item>\r\n                                            </List.List>\r\n                                        </List.Content>\r\n                                    </List.Item>\r\n                                    <List.Item>\r\n                                        <List.Icon name='file' />\r\n                                        <List.Content>\r\n                                            <List.Header>theme.config</List.Header>\r\n                                            <List.Description>\r\n                                                Config file for setting packaged themes\r\n                                            </List.Description>\r\n                                        </List.Content>\r\n                                    </List.Item>\r\n                                </List.List>\r\n                            </List.Content>\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Icon name='folder' />\r\n                            <List.Content>\r\n                                <List.Header>dist</List.Header>\r\n                                <List.Description>Compiled CSS and JS files</List.Description>\r\n                                <List.List>\r\n                                    <List.Item>\r\n                                        <List.Icon name='folder' />\r\n                                        <List.Content>\r\n                                            <List.Header>components</List.Header>\r\n                                            <List.Description>\r\n                                                Individual component CSS and JS\r\n                                            </List.Description>\r\n                                        </List.Content>\r\n                                    </List.Item>\r\n                                </List.List>\r\n                            </List.Content>\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Icon name='file' />\r\n                            <List.Content>\r\n                                <List.Header>semantic.json</List.Header>\r\n                                <List.Description>Contains build settings for gulp</List.Description>\r\n                            </List.Content>\r\n                        </List.Item>\r\n                    </List>\r\n                </div>\r\n\r\n                <div>\r\n                    node_dns_hosts\r\n                    <span>\r\n                        static dns records in /etc/hosts\r\n                    </span>\r\n                </div>\r\n                <div>\r\n                    10.10.10.10 yum.pigsty\r\n                </div>\r\n                <div>\r\n                    10.10.10.10 yum.pigsty\r\n                </div>\r\n                <div>\r\n                    node_dns_server\r\n                    <span>\r\n                        add (default) | none (skip) | overwrite (remove old settings)\r\n                    </span>\r\n                </div>\r\n                <div>\r\n                    add\r\n                </div>\r\n\r\n                <RepoUpstreams />\r\n            </div>\r\n\r\n        );\r\n         **/\r\n    }\r\n}\r\nconst mapStateToProps = (state, props) => ({\r\n\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PigstyConfigPage);\r\n","import React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport './index.css'\r\n\r\nclass CurrentJobLog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            clusterName: '',\r\n            cmd: ''\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const {\r\n            configData\r\n        } = this.props;\r\n\r\n        return (\r\n            <div className='playbook-item'>\r\n                <div className='playbook-item-intro'>\r\n                    <h1>Create User</h1>\r\n                    <div className=\"lead\">How to perform one-pass bootstrap for sandbox?</div>\r\n\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n    configData: state.configData\r\n});\r\nconst mapDispatchToProps = dispatch => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentJobLog);\r\n","import React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport './index.css'\r\n\r\nclass HistoryJobs extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            clusterName: '',\r\n            cmd: ''\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const {\r\n            configData\r\n        } = this.props;\r\n\r\n        return (\r\n            <div className='playbook-item'>\r\n                <div className='playbook-item-intro'>\r\n                    <h1>Create User</h1>\r\n                    <div className=\"lead\">How to perform one-pass bootstrap for sandbox?</div>\r\n\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n    configData: state.configData\r\n});\r\nconst mapDispatchToProps = dispatch => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HistoryJobs);\r\n","import React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {Tab} from \"semantic-ui-react\";\r\nimport './index.css';\r\nimport actions from \"../../actions\";\r\nimport CurrentJobLog from \"./currentJobLog\";\r\nimport HistoryJobs from \"./historyJobs\";\r\n\r\nconst panes = [\r\n    {\r\n        menuItem: { key: 'currentJobLog', icon: 'arrow alternate circle right outline', content: 'Current Job' },\r\n        render: () => <Tab.Pane className='job-pane'><CurrentJobLog/></Tab.Pane> },\r\n    {\r\n        menuItem: { key: 'historyJobs', icon: 'arrow alternate circle right outline', content: 'History Jobs' },\r\n        render: () => <Tab.Pane className='job-pane'><HistoryJobs/></Tab.Pane> }\r\n]\r\n\r\nclass JobsPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    _renderJobs(){\r\n        const {\r\n            configData\r\n        } = this.props;\r\n        let renders = Object.keys(configData.all.children).map((cKeyItem,cKeyIndex)=>{\r\n            let clusterItem = configData.all.children[cKeyItem];\r\n            return null\r\n        })\r\n\r\n        return renders;\r\n\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='page-wrap jobs'>\r\n                <Tab menu={{ fluid: true, vertical: true, tabular: true }} panes={panes} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state, props) => ({\r\n    configData:state.configData,\r\n    jobs:state.jobs\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    getJobs: (formParams, callBack) => dispatch(actions.getJobs(formParams, callBack)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(JobsPage);\r\n","import React from 'react';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {Button, Modal} from \"semantic-ui-react\";\r\nimport CodeMirror from '@uiw/react-codemirror';\r\nimport 'codemirror/addon/display/autorefresh';\r\nimport 'codemirror/addon/comment/comment';\r\nimport 'codemirror/addon/edit/matchbrackets';\r\nimport 'codemirror/keymap/sublime';\r\nimport 'codemirror/theme/monokai.css';\r\nimport 'codemirror/theme/twilight.css';\r\nimport './cmdViewer.css';\r\nimport eventEmitter from \"../commons/eventEmitter\";\r\nimport actions from \"../actions\";\r\n\r\nclass CmdViewer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.cmdUrl = '';\r\n        this.state = {\r\n            open:false,\r\n            renderCode:`Loading...`,\r\n            eventName:'',\r\n            sseUrl:'',\r\n            jobId:''\r\n        }\r\n        this.line = 0;\r\n        this.codeMirrorRef = null;\r\n        this.streamSSE = null;\r\n\r\n        this.timer = null;\r\n        this.timerGap = 3000;\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.emitter = eventEmitter.addListener('showCmdViewer',(data)=>{\r\n            this.setState({\r\n                open:true,\r\n                renderCode:`Loading...`,\r\n                sseUrl:data.sseUrl,\r\n                eventName:data.eventName,\r\n                jobId:data.jobId\r\n            },()=>{\r\n                //this._openSSE();\r\n                this._startLogTimer();\r\n            })\r\n        })\r\n    }\r\n\r\n    _startLogTimer(){\r\n        const {\r\n            jobId\r\n        } = this.state;\r\n        const {\r\n            getJobLogs\r\n        } = this.props;\r\n        let that = this;\r\n        this.timer = setInterval(()=>{\r\n            getJobLogs({\r\n                jobId\r\n            },(backdata)=>{\r\n                that.setState({\r\n                    renderCode:backdata.data\r\n                })\r\n            })\r\n        },this.timerGap)\r\n    }\r\n\r\n    closeModal(){\r\n        if(this.streamSSE){\r\n            this.streamSSE.close();\r\n        }\r\n        if(this.timer){\r\n            clearInterval(this.timer)\r\n        }\r\n        this.setState({\r\n            open:false\r\n        })\r\n    }\r\n\r\n    _openSSE(){\r\n        const {\r\n            eventName,\r\n            sseUrl\r\n        } = this.state;\r\n        let that = this;\r\n        if(this.streamSSE){\r\n            this.streamSSE.close();\r\n        }\r\n        this.streamSSE = new EventSource(sseUrl);\r\n        this.streamSSE?.addEventListener(eventName,function (e){\r\n            that.setState({\r\n                renderCode:that.state.renderCode+e.data\r\n            },()=>{\r\n                if(that.codeMirrorRef.editor){\r\n                    that.codeMirrorRef.editor.scrollTo(\r\n                        0,\r\n                        that.codeMirrorRef.editor.getScrollInfo().height\r\n                    )\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    stopCmd(){\r\n        const {\r\n            jobId\r\n        } = this.state;\r\n        const {\r\n            deleteJob\r\n        } = this.props;\r\n        eventEmitter.emit(\r\n            'showConfirmBox',\r\n            {\r\n                content: 'Are you sure stop this script ?',\r\n                confirmButton: 'Stop',\r\n                callback: (flag) => {\r\n                    if (flag) {\r\n                        deleteJob({\r\n                            jobid:jobId,\r\n                        },backdata=>{\r\n                            if(backdata.data.message === 'job deleted'){\r\n                                eventEmitter.emit('showToasts',{\r\n                                    type:'success',\r\n                                    msg:'save success'\r\n                                })\r\n                            }else {\r\n                                eventEmitter.emit('showToasts',{\r\n                                    type:'error',\r\n                                    msg:backdata.data.message\r\n                                })\r\n                            }\r\n                        })\r\n\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n\r\n        const {\r\n            renderCode,\r\n            open\r\n        } = this.state;\r\n        return (\r\n            <Modal\r\n                closeIcon\r\n                open={open}\r\n                centered={false}\r\n                className={'modal-cmdviewer'}\r\n                onClose={this.closeModal.bind(this)}\r\n            >\r\n                <Modal.Header>Console Logs</Modal.Header>\r\n                <Modal.Content scrolling>\r\n                    <div className=\"cmdViewer\">\r\n                        <CodeMirror\r\n                            ref={(ref)=>{\r\n                                this.codeMirrorRef = ref\r\n                            }}\r\n                            value={renderCode}\r\n                            options={{\r\n                                theme: 'monokai',\r\n                                tabSize: 2,\r\n                                keyMap: 'sublime',\r\n                                mode: 'shell',\r\n                                readOnly:'nocursor',\r\n                                lineNumbers:false,\r\n                                autofocus:false\r\n                            }}\r\n                            // onUpdate={(instance)=>{\r\n                            //     setTimeout(()=>{\r\n                            //         console.log(instance.getScrollInfo().height)\r\n                            //         instance.scrollTo({\r\n                            //             x:0,\r\n                            //             y:instance.getScrollInfo().height\r\n                            //         })\r\n                            //     },200)\r\n                            // }}\r\n\r\n                        />\r\n\r\n                    </div>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button\r\n                            onClick={this.stopCmd.bind(this)}\r\n                    >\r\n                        Stop\r\n                    </Button>\r\n                    <Button primary\r\n                        onClick={this.closeModal.bind(this)}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n    jobs:state.jobs\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    getJobLogs: (formParams, callBack) => dispatch(actions.getJobLogs(formParams, callBack)),\r\n    deleteJob: (formParams, callBack) => dispatch(actions.deleteJob(formParams, callBack)),\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CmdViewer));\r\n","import React from 'react';\r\nimport CodeMirror from '@uiw/react-codemirror';\r\nimport 'codemirror/addon/display/autorefresh';\r\nimport 'codemirror/addon/comment/comment';\r\nimport 'codemirror/addon/edit/matchbrackets';\r\nimport 'codemirror/keymap/sublime';\r\nimport 'codemirror/theme/monokai.css';\r\nimport './codeEditor.css';\r\nimport {Button, Modal} from \"semantic-ui-react\";\r\nimport eventEmitter from \"../commons/eventEmitter\";\r\nimport yaml from \"js-yaml\";\r\n\r\nexport default class CodeEditor extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.codeM = null;\r\n        this.state = {\r\n            open:false,\r\n            codeData:'',\r\n            title:'code editor'\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.emitter = eventEmitter.addListener('showCodeEditor',(data)=>{\r\n            this.setState({\r\n                open:true,\r\n                codeData:data.codeData,\r\n                title:data.title || 'Code editor',\r\n            },()=>{\r\n                this.parentCallback = data.callback;\r\n            })\r\n        })\r\n    }\r\n\r\n    closeModal(){\r\n        this.setState({\r\n            open:false\r\n        })\r\n    }\r\n\r\n    saveCode(){\r\n        let code = this.codeM.editor.getValue();\r\n\r\n        let JSONYaml = null;\r\n        try {\r\n            JSONYaml = yaml.load(code);\r\n        } catch (e) {\r\n            eventEmitter.emit('showToasts',{\r\n                type:'error',\r\n                msg:e.toString()\r\n            })\r\n        }\r\n\r\n        if(JSONYaml){\r\n            this.setState({\r\n                open:false\r\n            },()=>{\r\n                this.parentCallback(code);\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            open,\r\n            title,\r\n            codeData\r\n        } = this.state;\r\n        let that = this;\r\n        return (\r\n            <Modal\r\n                closeIcon\r\n                open={open}\r\n                centered={false}\r\n                className={'modal-codeEditor'}\r\n                onClose={this.closeModal.bind(this)}\r\n            >\r\n                <Modal.Header>{title}</Modal.Header>\r\n                <Modal.Content scrolling>\r\n            <div className=\"codeEditor\">\r\n                <CodeMirror\r\n                    ref={_ref=>{\r\n                        if(_ref?.editor){\r\n                            that.codeM = _ref;\r\n                        }\r\n                    }}\r\n                    value={codeData}\r\n                    options={{\r\n                        theme: 'monokai',\r\n                        tabSize: 2,\r\n                        keyMap: 'sublime',\r\n                        mode: 'yaml',\r\n                    }}\r\n                />\r\n            </div>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button\r\n                            onClick={this.closeModal.bind(this)}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                    <Button primary\r\n                            onClick={this.saveCode.bind(this)}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {Button, Form, Modal} from \"semantic-ui-react\";\r\nimport eventEmitter from \"../../commons/eventEmitter\";\r\nimport actions from \"../../actions\";\r\n\r\nclass EditClusterForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            editType: 'add',//add||edit\r\n            clusterName: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.emitter = eventEmitter.addListener('showEditClusterForm', (data) => {\r\n            this.setState({\r\n                open: true,\r\n                ...data\r\n            })\r\n        })\r\n    }\r\n\r\n    _editCluster(){\r\n        const {\r\n            addNewCluster\r\n        } = this.props;\r\n        const {\r\n            clusterName\r\n        } = this.state;\r\n\r\n        if(clusterName.length === 0 || clusterName.length > 50){\r\n            eventEmitter.emit('showToasts',{\r\n                type:'error',\r\n                msg:'cluster name length error'\r\n            })\r\n            return false;\r\n        }\r\n\r\n        addNewCluster({\r\n            clusterName\r\n        },(backData)=>{\r\n            this.setOpen(false)\r\n        })\r\n    }\r\n\r\n    setOpen(flag) {\r\n        this.setState({\r\n            open: flag,\r\n            clusterName:'',\r\n            editType:'add'\r\n        })\r\n    }\r\n\r\n    _inputChange(name, value) {\r\n        this.setState({\r\n            [name]:value\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const {\r\n            open,\r\n            clusterName,\r\n            editType\r\n        } = this.state;\r\n\r\n        return (\r\n            <Modal\r\n                onClose={this.setOpen.bind(this, false)}\r\n                open={open}\r\n                size='mini'\r\n            >\r\n                <Modal.Header>{editType === 'add'?'Add Cluster':'Edit Cluster'}</Modal.Header>\r\n                <Modal.Content>\r\n                    <Form>\r\n                        <Form.Field>\r\n                            <label>Cluster Name</label>\r\n                            <Form.Input\r\n                                value={clusterName}\r\n                                placeholder='name'\r\n                                name='clusterName'\r\n                                onChange={(e, {name, value}) => {\r\n                                    this._inputChange(name, value)\r\n                                }}\r\n                            />\r\n                        </Form.Field>\r\n                    </Form>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button basic\r\n                        onClick={this.setOpen.bind(this,false)}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        primary\r\n                        onClick={this._editCluster.bind(this)}\r\n                    >Save</Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({});\r\nconst mapDispatchToProps = dispatch => ({\r\n    addNewCluster: (formParams, callBack) => dispatch(actions.addNewCluster(formParams, callBack)),\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EditClusterForm));\r\n","import React from 'react';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {Button, Form, Input, Modal} from \"semantic-ui-react\";\r\nimport eventEmitter from \"../../commons/eventEmitter\";\r\nimport actions from \"../../actions\";\r\n\r\nclass EditClusterForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open:false,\r\n            editType:'add',//add || edit\r\n            pg_offline_query:false,\r\n            host_ip:'',\r\n            pg_role:'',\r\n            pg_seq:1,\r\n            clusterName:null,\r\n            clusterData:null\r\n        }\r\n\r\n        this.roleOptions = []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.emitter = eventEmitter.addListener('showEditClusterHostForm', (data) => {\r\n\r\n            this.roleOptions = [\r\n                { key: 'p', text: 'primary', value: 'primary' },\r\n                { key: 'r', text: 'replica', value: 'replica' },\r\n                { key: 'o', text: 'offline', value: 'offline' },\r\n                { key: 's', text: 'standby', value: 'standby' },\r\n                { key: 'd', text: 'delayed', value: 'delayed' }\r\n            ]\r\n            let roleValue = 'primary';\r\n            if(Object.keys(data.clusterData.hosts).length != 0){\r\n                Object.keys(data.clusterData.hosts).forEach((hItem,hIndex)=>{\r\n                    if(data.clusterData.hosts[hItem]?.pg_role === 'primary'){\r\n                        roleValue = 'replica';\r\n                    }\r\n                })\r\n            }\r\n\r\n            this.setState({\r\n                open: true,\r\n                ...data,\r\n                pg_role:roleValue\r\n            })\r\n        })\r\n    }\r\n\r\n    setOpen(flag){\r\n        this.setState({\r\n            open:flag\r\n        })\r\n    }\r\n\r\n    _inputHandle(name,value){\r\n        this.setState({\r\n            [name]:value\r\n        })\r\n    }\r\n\r\n    _editClusterHost(){\r\n        const {\r\n            addNewClusterHost\r\n        } = this.props;\r\n        const {\r\n            pg_offline_query,\r\n            host_ip,\r\n            pg_role,\r\n            pg_seq,\r\n            clusterName\r\n        } = this.state;\r\n\r\n        if(clusterName){\r\n            addNewClusterHost({\r\n                pg_offline_query,\r\n                host_ip,\r\n                pg_role,\r\n                pg_seq,\r\n                clusterName\r\n            },(callback)=>{\r\n                this.setOpen(false)\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const {\r\n            open,\r\n            pg_offline_query,\r\n            host_ip,\r\n            pg_role,\r\n            pg_seq,\r\n            editType,\r\n            clusterData\r\n        } = this.state;\r\n        const {\r\n            configData\r\n        } = this.props;\r\n\r\n        if(!open){\r\n            return null;\r\n        }\r\n\r\n\r\n\r\n\r\n        return (\r\n            <Modal\r\n                onClose={this.setOpen.bind(this,false)}\r\n                open={open}\r\n                size='mini'\r\n            >\r\n                <Modal.Header>{editType === 'add'?'Add Cluster Host':'Edit Cluster Host'}</Modal.Header>\r\n                <Modal.Content>\r\n                    <Form>\r\n                        <Form.Field>\r\n                            <label>Node IP (Inventory Hostname)</label>\r\n                            <Input\r\n                                placeholder='0.0.0.0'\r\n                                name='host_ip'\r\n                                value={host_ip}\r\n                                onChange={(e,{name,value})=>{\r\n                                    this._inputHandle(name,value)\r\n                                }}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Instance Sequence</label>\r\n                            <Input\r\n                                placeholder='1'\r\n                                name='pg_seq'\r\n                                value={pg_seq}\r\n                                onChange={(e,{name,value})=>{\r\n                                    this._inputHandle(name,parseInt(value))\r\n                                }}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Group inline>\r\n                            <label>Offline Query</label>\r\n                            <Form.Radio\r\n                                label='true'\r\n                                name='pg_offline_query'\r\n                                checked={pg_offline_query === true}\r\n                                onChange={(e,{name,value})=>{\r\n                                    this._inputHandle(name,true)\r\n                                }}\r\n                            />\r\n                            <Form.Radio\r\n                                label='false'\r\n                                name='pg_offline_query'\r\n                                checked={pg_offline_query === false}\r\n                                onChange={(e,{name,value})=>{\r\n                                    this._inputHandle(name,false)\r\n                                }}\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Field>\r\n                            <Form.Select\r\n                                fluid\r\n                                label='Role'\r\n                                options={this.roleOptions}\r\n                                name='pg_role'\r\n                                placeholder=''\r\n                                value={pg_role}\r\n                                onChange={(e,{name,value})=>{\r\n                                    this._inputHandle(name,value)\r\n                                }}\r\n                            />\r\n                        </Form.Field>\r\n                    </Form>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button basic\r\n                            onClick={this.setOpen.bind(this,false)}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        primary\r\n                        onClick={this._editClusterHost.bind(this)}\r\n                    >Save</Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n    configData:state.configData\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    addNewClusterHost: (formParams, callBack) => dispatch(actions.addNewClusterHost(formParams, callBack)),\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EditClusterForm));\r\n","import React from 'react';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {Button, Card, Form, Icon, Input, Label, List, Modal} from \"semantic-ui-react\";\r\nimport eventEmitter from \"../../commons/eventEmitter\";\r\nimport actions from \"../../actions\";\r\n\r\nclass EditClusterPgUserForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            editType: 'add',//add || edit\r\n\r\n            name: '',\r\n            password: '',\r\n            login: null,\r\n            superuser: null,\r\n            createdb: null,\r\n            createrole: null,\r\n            inherit: null,\r\n            replication: null,\r\n            bypassrls: null,\r\n            connlimit: -1,\r\n            expire_at: '2030-12-31',\r\n            parameters: {\r\n                search_path: 'public'\r\n            },\r\n            roles: ['dbrole_offline'],\r\n            expire_in: 365,\r\n            pgbouncer: null,\r\n            comment: '',\r\n\r\n            clusterData: null,\r\n\r\n            parameterKey:'',\r\n            parameterValue:''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.emitter = eventEmitter.addListener('showEditClusterPgUserForm', (data) => {\r\n            this.setState({\r\n                open: true,\r\n                ...data\r\n            })\r\n        })\r\n    }\r\n\r\n    setOpen(flag) {\r\n        this.setState({\r\n            open: flag\r\n        })\r\n    }\r\n\r\n    _inputHandle(name, value) {\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    _addParameter(){\r\n        const {\r\n            parameterKey,\r\n            parameterValue\r\n        } = this.state;\r\n        if(parameterKey.length > 0 && parameterValue.length >0){\r\n            this.setState({\r\n                parameters:{\r\n                    ...this.state.parameters,\r\n                    [parameterKey]:parameterValue\r\n                },\r\n                parameterKey:'',\r\n                parameterValue:''\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    _deleteParameter(parameterKey){\r\n        delete this.state.parameters[parameterKey];\r\n        this.setState({\r\n            parameters:{\r\n                ...this.state.parameters\r\n            }\r\n        })\r\n    }\r\n\r\n    _checkboxHandle(name, value, flag) {\r\n\r\n        if (flag) {\r\n            this.setState({\r\n                [name]: [...this.state[name], value]\r\n            })\r\n        } else {\r\n            this.state[name].splice(this.state[name].findIndex(item => item === value), 1)\r\n            this.setState({\r\n                [name]: this.state[name]\r\n            })\r\n        }\r\n    }\r\n\r\n    _editClusterPgUser() {\r\n\r\n    }\r\n\r\n    _addNewClusterPgUser() {\r\n        const {\r\n            addNewClusterPgUser\r\n        } = this.props;\r\n        const {\r\n            name,\r\n            password,\r\n            login,\r\n            superuser,\r\n            createdb,\r\n            createrole,\r\n            inherit,\r\n            replication,\r\n            bypassrls,\r\n            connlimit,\r\n            expire_at,\r\n            parameters,\r\n            roles,\r\n            expire_in,\r\n            pgbouncer,\r\n            comment,\r\n            clusterName,\r\n        } = this.state;\r\n\r\n        let fromData = {\r\n            name,\r\n            password,\r\n            roles,\r\n            parameters,\r\n            expire_at,\r\n            //expire_in,\r\n            connlimit,\r\n        }\r\n        if(comment.length > 0){\r\n            fromData.comment = comment\r\n        }\r\n        if(login != null){\r\n            fromData.login = login\r\n        }\r\n        if(superuser != null){\r\n            fromData.superuser = superuser\r\n        }\r\n        if(createdb != null){\r\n            fromData.createdb = createdb\r\n        }\r\n        if(createrole != null){\r\n            fromData.createrole = createrole\r\n        }\r\n        if(inherit != null){\r\n            fromData.inherit = inherit\r\n        }\r\n        if(replication != null){\r\n            fromData.replication = replication\r\n        }\r\n        if(bypassrls != null){\r\n            fromData.bypassrls = bypassrls\r\n        }\r\n        if(pgbouncer != null){\r\n            fromData.pgbouncer = pgbouncer\r\n        }\r\n\r\n        //判断是否重名\r\n        addNewClusterPgUser({\r\n            formData: fromData,\r\n            clusterName\r\n        }, backData => {\r\n            if(backData.success){\r\n                this.setState({\r\n                    open: false\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const {\r\n            open,\r\n            editType,\r\n            name,\r\n            password,\r\n            login,\r\n            superuser,\r\n            createdb,\r\n            createrole,\r\n            inherit,\r\n            replication,\r\n            bypassrls,\r\n            connlimit,\r\n            expire_at,\r\n            parameters,\r\n            roles,\r\n            expire_in,\r\n            pgbouncer,\r\n            comment,\r\n            parameterKey,\r\n            parameterValue\r\n        } = this.state;\r\n\r\n\r\n        let _renderParameters = Object.keys(parameters).map((pItem,pIndex)=>{\r\n            return (\r\n                <Form.Group widths='equal' className='m' key={'key'+pIndex}>\r\n                    <Form.Input value={pItem} placeholder='key'\r\n                                disabled\r\n                                style={{color:'#333'}}\r\n                    />\r\n                    <Form.Input value={parameters[pItem]} placeholder='value'\r\n                                disabled\r\n                                style={{color:'#333'}}\r\n                    />\r\n                    <Button type='submit' icon='minus'\r\n                            onClick={this._deleteParameter.bind(this,pItem)}\r\n                    ></Button>\r\n                </Form.Group>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <Modal\r\n                onClose={this.setOpen.bind(this, false)}\r\n                open={open}\r\n                size='small'\r\n            >\r\n                <Modal.Header>{'Manage Cluster Pg Users'}</Modal.Header>\r\n                <Modal.Content>\r\n                    <Form>\r\n                        <Form.Group widths='equal' className='border-bottom pb-5px'>\r\n                            <Form.Field>\r\n                                <label>name</label>\r\n                                <Input\r\n                                    placeholder=''\r\n                                    name='name'\r\n                                    value={name}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, value)\r\n                                    }}\r\n                                />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <label>password</label>\r\n                                <Input\r\n                                    placeholder=''\r\n                                    name='password'\r\n                                    value={password}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, value)\r\n                                    }}\r\n                                />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <label>comment</label>\r\n                                <Input\r\n                                    placeholder='example personal user for interactive queries'\r\n                                    name='comment'\r\n                                    value={comment}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, value)\r\n                                    }}\r\n                                />\r\n                            </Form.Field>\r\n                        </Form.Group>\r\n                        <Form.Group widths='equal' className='border-bottom plr-05rem pb-5px'>\r\n                            <Form.Group inline className='flex-1'>\r\n                                <label>login</label>\r\n                                <Form.Radio\r\n                                    label='null'\r\n                                    name='login'\r\n                                    checked={login === null}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, null)\r\n                                    }}\r\n                                />\r\n                                <Form.Radio\r\n                                    label='true'\r\n                                    name='login'\r\n                                    checked={login === true}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, true)\r\n                                    }}\r\n                                />\r\n                                <Form.Radio\r\n                                    label='false'\r\n                                    name='login'\r\n                                    checked={login === false}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, false)\r\n                                    }}\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group inline className='flex-1'>\r\n                                <label>superuser</label>\r\n                                <Form.Radio\r\n                                    label='null'\r\n                                    name='superuser'\r\n                                    checked={superuser === null}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, null)\r\n                                    }}\r\n                                />\r\n                                <Form.Radio\r\n                                    label='true'\r\n                                    name='superuser'\r\n                                    checked={superuser === true}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, true)\r\n                                    }}\r\n                                />\r\n                                <Form.Radio\r\n                                    label='false'\r\n                                    name='superuser'\r\n                                    checked={superuser === false}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, false)\r\n                                    }}\r\n                                />\r\n                            </Form.Group>\r\n                        </Form.Group>\r\n                        <Form.Group widths='equal' className='border-bottom plr-05rem pb-5px'>\r\n                            <Form.Group inline className='flex-1'>\r\n                                <label>createdb</label>\r\n                                <Form.Radio\r\n                                    label='null'\r\n                                    name='createdb'\r\n                                    checked={createdb === null}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, null)\r\n                                    }}\r\n                                />\r\n                                <Form.Radio\r\n                                    label='true'\r\n                                    name='createdb'\r\n                                    checked={createdb === true}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, true)\r\n                                    }}\r\n                                />\r\n                                <Form.Radio\r\n                                    label='false'\r\n                                    name='createdb'\r\n                                    checked={createdb === false}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, false)\r\n                                    }}\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group inline className='flex-1'>\r\n                                <label>createrole</label>\r\n                                <Form.Radio\r\n                                    label='null'\r\n                                    name='createrole'\r\n                                    checked={createrole === null}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, null)\r\n                                    }}\r\n                                />\r\n                                <Form.Radio\r\n                                    label='true'\r\n                                    name='createrole'\r\n                                    checked={createrole === true}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, true)\r\n                                    }}\r\n                                />\r\n                                <Form.Radio\r\n                                    label='false'\r\n                                    name='createrole'\r\n                                    checked={createrole === false}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, false)\r\n                                    }}\r\n                                />\r\n                            </Form.Group>\r\n                        </Form.Group>\r\n                        <Form.Group widths='equal' className='border-bottom plr-05rem pb-5px'>\r\n                            <Form.Group inline className='flex-1'>\r\n                                <label>inherit</label>\r\n                                <Form.Radio\r\n                                    label='null'\r\n                                    name='inherit'\r\n                                    checked={inherit === null}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, null)\r\n                                    }}\r\n                                />\r\n                                <Form.Radio\r\n                                    label='true'\r\n                                    name='inherit'\r\n                                    checked={inherit === true}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, true)\r\n                                    }}\r\n                                />\r\n                                <Form.Radio\r\n                                    label='false'\r\n                                    name='inherit'\r\n                                    checked={inherit === false}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, false)\r\n                                    }}\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group inline className='flex-1'>\r\n                                <label>replication</label>\r\n                                <Form.Radio\r\n                                    label='null'\r\n                                    name='replication'\r\n                                    checked={replication === null}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, null)\r\n                                    }}\r\n                                />\r\n                                <Form.Radio\r\n                                    label='true'\r\n                                    name='replication'\r\n                                    checked={replication === true}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, true)\r\n                                    }}\r\n                                />\r\n                                <Form.Radio\r\n                                    label='false'\r\n                                    name='replication'\r\n                                    checked={replication === false}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, false)\r\n                                    }}\r\n                                />\r\n                            </Form.Group>\r\n                        </Form.Group>\r\n                        <Form.Group widths='equal' className='border-bottom plr-05rem pb-5px'>\r\n                            <Form.Group inline className='flex-1'>\r\n                                <label>bypassrls</label>\r\n                                <Form.Radio\r\n                                    label='null'\r\n                                    name='bypassrls'\r\n                                    checked={bypassrls === null}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, null)\r\n                                    }}\r\n                                />\r\n                                <Form.Radio\r\n                                    label='true'\r\n                                    name='bypassrls'\r\n                                    checked={bypassrls === true}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, true)\r\n                                    }}\r\n                                />\r\n                                <Form.Radio\r\n                                    label='false'\r\n                                    name='bypassrls'\r\n                                    checked={bypassrls === false}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, false)\r\n                                    }}\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group inline className='flex-1'>\r\n                                <label>pgbouncer</label>\r\n                                <Form.Radio\r\n                                    label='null'\r\n                                    name='pgbouncer'\r\n                                    checked={pgbouncer === null}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, null)\r\n                                    }}\r\n                                />\r\n                                <Form.Radio\r\n                                    label='true'\r\n                                    name='pgbouncer'\r\n                                    checked={pgbouncer === true}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, true)\r\n                                    }}\r\n                                />\r\n                                <Form.Radio\r\n                                    label='false'\r\n                                    name='pgbouncer'\r\n                                    checked={pgbouncer === false}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, false)\r\n                                    }}\r\n                                />\r\n                            </Form.Group>\r\n                        </Form.Group>\r\n\r\n                        <Form.Field>\r\n                            <label>roles (Separated by commas)</label>\r\n                            <Input\r\n                                placeholder='role,role'\r\n                                name='roles'\r\n                                value={roles.join(',')}\r\n                                onChange={(e, {name, value}) => {\r\n                                    this._inputHandle(name, value.split(','))\r\n                                }}\r\n                            />\r\n                        </Form.Field>\r\n\r\n                        <Form.Group widths='equal'>\r\n                            <Form.Field>\r\n                                <label>connlimit</label>\r\n                                <Input\r\n                                    placeholder=''\r\n                                    name='connlimit'\r\n                                    value={connlimit}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, value)\r\n                                    }}\r\n                                />\r\n                            </Form.Field>\r\n\r\n                            <Form.Field>\r\n                                <label>expire_at</label>\r\n                                <Input\r\n                                    placeholder=''\r\n                                    name='expire_at'\r\n                                    value={expire_at}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, value)\r\n                                    }}\r\n                                />\r\n                            </Form.Field>\r\n\r\n\r\n\r\n                        </Form.Group>\r\n\r\n                        <Form.Field>\r\n                            <label>parameters</label>\r\n                            <Form.Group widths='equal'>\r\n                                <Form.Input name='parameterKey' value={parameterKey} placeholder='key'\r\n                                            onChange={(e, {name, value}) => {\r\n                                                this._inputHandle(name, value)\r\n                                            }}\r\n                                />\r\n                                <Form.Input name='parameterValue' value={parameterValue} placeholder='value'\r\n                                            onChange={(e, {name, value}) => {\r\n                                                this._inputHandle(name, value)\r\n                                            }}\r\n                                />\r\n                                <Button type='submit' icon='plus'\r\n                                        onClick={this._addParameter.bind(this)}\r\n                                ></Button>\r\n                            </Form.Group>\r\n                            <div>\r\n                                {_renderParameters}\r\n                            </div>\r\n                        </Form.Field>\r\n\r\n\r\n\r\n                    </Form>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button\r\n                        onClick={this.setOpen.bind(this, false)}\r\n                    >Cancel</Button>\r\n                    <Button\r\n                        primary\r\n                        onClick={this._addNewClusterPgUser.bind(this)}\r\n                    >Save</Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    addNewClusterPgUser: (formParams, callBack) => dispatch(actions.addNewClusterPgUser(formParams, callBack)),\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EditClusterPgUserForm));\r\n","import React from 'react';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {Button, Form, Input, Modal} from \"semantic-ui-react\";\r\nimport eventEmitter from \"../../commons/eventEmitter\";\r\nimport actions from \"../../actions\";\r\n\r\nclass EditClusterPgDatabaseForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            editType: 'add',//add || edit\r\n            name: '',\r\n            owner: '',\r\n            schemas: [],\r\n            extensions: [],\r\n            parameters: {},\r\n            comment: '',\r\n            pgbouncer: true,\r\n            allowconn: true,\r\n            revokeconn: false,\r\n            clusterName: null,\r\n            parameterKey: '',\r\n            parameterValue: '',\r\n            extensionKey: '',\r\n            extensionValue: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.emitter = eventEmitter.addListener('showEditClusterPgDatabaseForm', (data) => {\r\n            this.setState({\r\n                open: true,\r\n                ...data\r\n            })\r\n        })\r\n    }\r\n\r\n    setOpen(flag) {\r\n        this.setState({\r\n            open: flag\r\n        })\r\n    }\r\n\r\n    _inputHandle(name, value) {\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    _addNewClusterPgDatabase() {\r\n        const {\r\n            addNewClusterPgDatabase\r\n        } = this.props;\r\n        const {\r\n            name,\r\n            owner,\r\n            schemas,\r\n            extensions,\r\n            parameters,\r\n            comment,\r\n            pgbouncer,\r\n            allowconn,\r\n            revokeconn,\r\n            clusterName\r\n        } = this.state;\r\n        let formData = {\r\n            name,\r\n            owner,\r\n            schemas,\r\n            pgbouncer,\r\n            allowconn,\r\n            revokeconn,\r\n            parameters\r\n        }\r\n        if(comment.length > 0){\r\n            formData.comment = comment\r\n        }\r\n        if(extensions.length > 0){\r\n            formData.extensions  = extensions;\r\n        }\r\n\r\n        // if(pgbouncer != null){\r\n        //     formData.pgbouncer = pgbouncer\r\n        // }\r\n        // if(allowconn != null){\r\n        //     formData.allowconn = allowconn\r\n        // }\r\n        // if(revokeconn != null){\r\n        //     formData.revokeconn = revokeconn\r\n        // }\r\n\r\n        if (clusterName) {\r\n            addNewClusterPgDatabase({\r\n                formData:formData,\r\n                clusterName\r\n            }, (backData) => {\r\n                if(backData.success){\r\n                    this.setState({\r\n                        open: false\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    _addParameter() {\r\n        const {\r\n            parameterKey,\r\n            parameterValue\r\n        } = this.state;\r\n        if (parameterKey.length > 0 && parameterValue.length > 0) {\r\n            this.setState({\r\n                parameters: {\r\n                    ...this.state.parameters,\r\n                    [parameterKey]: parameterValue\r\n                },\r\n                parameterKey: '',\r\n                parameterValue: ''\r\n            })\r\n        }\r\n    }\r\n\r\n    _deleteParameter(parameterKey) {\r\n        delete this.state.parameters[parameterKey];\r\n        this.setState({\r\n            parameters: {\r\n                ...this.state.parameters\r\n            }\r\n        })\r\n    }\r\n\r\n    _addExtension() {\r\n        const {\r\n            extensionKey,\r\n            extensionValue\r\n        } = this.state;\r\n        if (extensionKey.length > 0) {\r\n            let newExtension = {\r\n                name: extensionKey\r\n            }\r\n            if (extensionValue.length > 0) {\r\n                newExtension.schema = extensionValue\r\n            }\r\n            this.setState({\r\n                extensions: [\r\n                    ...this.state.extensions,\r\n                    newExtension\r\n                ],\r\n                extensionKey: '',\r\n                extensionValue: ''\r\n            })\r\n        }\r\n    }\r\n\r\n    _deleteExtension(extension) {\r\n        let newE = this.state.extensions.map((eItem, eIndex) => {\r\n            return JSON.stringify(eItem) != JSON.stringify(extension)\r\n        })\r\n        this.setState({\r\n            extensions: newE\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const {\r\n            open,\r\n            name,\r\n            owner,\r\n            parameters,\r\n            schemas,\r\n            extensions,\r\n            comment,\r\n            pgbouncer,\r\n            allowconn,\r\n            revokeconn,\r\n            editType,\r\n            parameterKey,\r\n            parameterValue,\r\n            extensionKey,\r\n            extensionValue,\r\n        } = this.state;\r\n\r\n        let _renderParameters = Object.keys(parameters).map((pItem, pIndex) => {\r\n            return (\r\n                <Form.Group widths='equal' className='m'>\r\n                    <Form.Input value={pItem} placeholder='key'\r\n                                disabled\r\n                                style={{color: '#333'}}\r\n                    />\r\n                    <Form.Input value={parameters[pItem]} placeholder='value'\r\n                                disabled\r\n                                style={{color: '#333'}}\r\n                    />\r\n                    <Button type='submit' icon='minus'\r\n                            onClick={this._deleteParameter.bind(this, pItem)}\r\n                    ></Button>\r\n                </Form.Group>\r\n            )\r\n        })\r\n\r\n        let _renderExtensions = extensions.map((eItem, eIndex) => {\r\n            return (\r\n                <Form.Group widths='equal' className='m'>\r\n                    <Input value={eItem.name} placeholder='name'\r\n                           disabled\r\n                           label='name'\r\n                           style={{color: '#333'}}\r\n                           className='field'\r\n                    />\r\n                    {eItem.schema ? (\r\n                        <Input value={eItem.schema} placeholder='schema'\r\n                               disabled\r\n                               label='schema'\r\n                               style={{color: '#333'}}\r\n                               className='field'\r\n                        />\r\n                    ) : null}\r\n\r\n                    <Button type='submit' icon='minus'\r\n                            onClick={this._deleteExtension.bind(this, eItem)}\r\n                    ></Button>\r\n                </Form.Group>\r\n            )\r\n        })\r\n\r\n\r\n        return (\r\n            <Modal\r\n                onClose={this.setOpen.bind(this, false)}\r\n                open={open}\r\n                size='small'\r\n            >\r\n                <Modal.Header>{editType === 'add' ? 'Add Cluster Host' : 'Edit Cluster Host'}</Modal.Header>\r\n                <Modal.Content>\r\n                    <Form>\r\n                        <Form.Group widths='equal' className='border-bottom pb-5px'>\r\n                            <Form.Field>\r\n                                <label>name</label>\r\n                                <Input\r\n                                    placeholder=''\r\n                                    name='name'\r\n                                    value={name}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, value)\r\n                                    }}\r\n                                />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <label>owner</label>\r\n                                <Input\r\n                                    placeholder=''\r\n                                    name='owner'\r\n                                    value={owner}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, value)\r\n                                    }}\r\n                                />\r\n                            </Form.Field>\r\n                        </Form.Group>\r\n\r\n                        <Form.Field>\r\n                            <label>comment</label>\r\n                            <Input\r\n                                placeholder=''\r\n                                name='comment'\r\n                                value={comment}\r\n                                onChange={(e, {name, value}) => {\r\n                                    this._inputHandle(name, value)\r\n                                }}\r\n                            />\r\n                        </Form.Field>\r\n\r\n                        <Form.Group widths='equal' className='border-bottom plr-05rem pb-5px'>\r\n                            <Form.Group inline className='flex-1'>\r\n                                <label>pgbouncer</label>\r\n                                <Form.Radio\r\n                                    label='true'\r\n                                    name='pgbouncer'\r\n                                    checked={pgbouncer === true}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, true)\r\n                                    }}\r\n                                />\r\n                                <Form.Radio\r\n                                    label='false'\r\n                                    name='pgbouncer'\r\n                                    checked={pgbouncer === false}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, false)\r\n                                    }}\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group inline className='flex-1'>\r\n                                <label>allowconn</label>\r\n                                <Form.Radio\r\n                                    label='true'\r\n                                    name='allowconn'\r\n                                    checked={allowconn === true}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, true)\r\n                                    }}\r\n                                />\r\n                                <Form.Radio\r\n                                    label='false'\r\n                                    name='allowconn'\r\n                                    checked={allowconn === false}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, false)\r\n                                    }}\r\n                                />\r\n                            </Form.Group>\r\n\r\n                        </Form.Group>\r\n                        <Form.Group widths='equal' className='border-bottom plr-05rem pb-5px'>\r\n                            <Form.Group inline className='flex-1'>\r\n                                <label>revokeconn</label>\r\n                                <Form.Radio\r\n                                    label='true'\r\n                                    name='revokeconn'\r\n                                    checked={revokeconn === true}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, true)\r\n                                    }}\r\n                                />\r\n                                <Form.Radio\r\n                                    label='false'\r\n                                    name='revokeconn'\r\n                                    checked={revokeconn === false}\r\n                                    onChange={(e, {name, value}) => {\r\n                                        this._inputHandle(name, false)\r\n                                    }}\r\n                                />\r\n                            </Form.Group>\r\n                        </Form.Group>\r\n\r\n\r\n                        <Form.Field>\r\n                            <label>schemas (Separated by commas)</label>\r\n                            <Input\r\n                                placeholder='schema,schema'\r\n                                name='schemas'\r\n                                value={schemas.join(',')}\r\n                                onChange={(e, {name, value}) => {\r\n                                    this._inputHandle(name, value.split(','))\r\n                                }}\r\n                            />\r\n                        </Form.Field>\r\n\r\n                        <Form.Field>\r\n                            <label>parameters</label>\r\n                            <Form.Group widths='equal'>\r\n                                <Form.Input name='parameterKey' value={parameterKey} placeholder='key'\r\n                                            onChange={(e, {name, value}) => {\r\n                                                this._inputHandle(name, value)\r\n                                            }}\r\n                                />\r\n                                <Form.Input name='parameterValue' value={parameterValue} placeholder='value'\r\n                                            onChange={(e, {name, value}) => {\r\n                                                this._inputHandle(name, value)\r\n                                            }}\r\n                                />\r\n                                <Button type='submit' icon='plus'\r\n                                        onClick={this._addParameter.bind(this)}\r\n                                ></Button>\r\n                            </Form.Group>\r\n                            <div>\r\n                                {_renderParameters}\r\n                            </div>\r\n                        </Form.Field>\r\n\r\n                        <Form.Field>\r\n                            <label>extensions</label>\r\n                            <Form.Group widths='equal'>\r\n                                <Form.Input name='extensionKey' value={extensionKey} placeholder='name'\r\n                                            onChange={(e, {name, value}) => {\r\n                                                this._inputHandle(name, value)\r\n                                            }}\r\n                                />\r\n                                <Form.Input name='extensionValue' value={extensionValue} placeholder='schema'\r\n                                            onChange={(e, {name, value}) => {\r\n                                                this._inputHandle(name, value)\r\n                                            }}\r\n                                />\r\n                                <Button type='submit' icon='plus'\r\n                                        onClick={this._addExtension.bind(this)}\r\n                                ></Button>\r\n                            </Form.Group>\r\n                            <div>\r\n                                {_renderExtensions}\r\n                            </div>\r\n                        </Form.Field>\r\n\r\n\r\n                    </Form>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button basic\r\n                            onClick={this.setOpen.bind(this, false)}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        primary\r\n                        onClick={this._addNewClusterPgDatabase.bind(this)}\r\n                    >Save</Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n    configData: state.configData\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    addNewClusterPgDatabase: (formParams, callBack) => dispatch(actions.addNewClusterPgDatabase(formParams, callBack)),\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EditClusterPgDatabaseForm));\r\n","import React from 'react'\r\nimport Header from \"../components/header\";\r\nimport Footer from \"../components/footer\";\r\nimport {Route} from \"react-router-dom\";\r\nimport DashBoard from \"./dashBoard\";\r\nimport PlaybookPage from \"./playbook\";\r\nimport PigstyConfigPage from './pigstyConfig';\r\nimport JobsPage from './jobs';\r\nimport CmdViewer from '../components/cmdViewer';\r\nimport CodeEditor from \"../components/codeEditor\";\r\nimport EditClusterForm from \"../components/forms/editClusterForm\";\r\nimport EditClusterHostForm from '../components/forms/editClusterHostForm';\r\nimport EditClusterPgUserForm from \"../components/forms/editClusterPgUserForm\";\r\nimport EditClusterPgDatabaseForm from \"../components/forms/editClusterPgDatabaseForm\";\r\n\r\nclass Wrap extends React.Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"inner-page\">\r\n                    <Header/>\r\n                    <div id=\"mainWrap\">\r\n                        <div id=\"mainContent\">\r\n                            <Route path={\"/\"} exact component={DashBoard}/>\r\n                            <Route path={\"/config\"} component={PigstyConfigPage}/>\r\n                            <Route path={\"/playbook\"} component={PlaybookPage}/>\r\n                            <Route path={\"/jobs\"} component={JobsPage}/>\r\n                        </div>\r\n                    </div>\r\n                    <Footer/>\r\n                </div>\r\n                <CmdViewer />\r\n                <CodeEditor/>\r\n                <EditClusterForm/>\r\n                <EditClusterHostForm/>\r\n                <EditClusterPgUserForm/>\r\n                <EditClusterPgDatabaseForm/>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Wrap;\r\n","import React from 'react';\r\nimport eventEmitter from \"../commons/eventEmitter\";\r\nclass LoadingCover extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible:props.visible?props.visible:false,\r\n            loadingText:props.loadingText?props.loadingText:''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.emitter = eventEmitter.addListener('showLoadingCover',(data)=>{\r\n            this.setState({\r\n                visible:data,\r\n                loadingText:'数据加载中...'\r\n            })\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            visible,\r\n            loadingText\r\n        } = this.state;\r\n        if(visible){\r\n            return (\r\n                <div id=\"loadingCover\">\r\n                    <div className=\"loading-overlay\">\r\n                        <div className=\"loading loading-lg\"></div>\r\n                        <div className=\"font-bold\" style={{marginLeft:'2rem'}}>{loadingText}</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }else {\r\n            return null\r\n        }\r\n    }\r\n}\r\n\r\nexport default LoadingCover;\r\n","import React from 'react'\r\nimport {Route} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport LoadingCover from \"./components/loadingCover\";\r\nimport actions from \"./actions\";\r\n\r\nclass AuthorizedRoute extends React.Component {\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    _getConfigData(){\r\n        const {\r\n            getConfigData,\r\n        } = this.props;\r\n        getConfigData({},(backData)=>{\r\n            //\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            component: Component,\r\n            //account,\r\n            configData,\r\n            ...rest\r\n        } = this.props;\r\n\r\n        if(!configData.hasOwnProperty('all')){\r\n            this._getConfigData();\r\n            return <LoadingCover visible={true} loadingText={'initializing...'}/>\r\n        }\r\n\r\n        return (\r\n            <Route {...rest} render={props => {\r\n                return <Component {...props} />\r\n            }} />\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n    //account: state.account,\r\n    configData:state.configData\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    getConfigData: (formParams, callBack) => dispatch(actions.getConfigData(formParams, callBack)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthorizedRoute);\r\n","import './App.css';\nimport {HashRouter, Switch} from 'react-router-dom';\nimport Wrap from \"./pages/wrap\";\nimport AuthorizedRoute from \"./authorizedRoute\";\nimport 'moment/locale/zh-cn';\n\nfunction App() {\n  return (\n      <HashRouter basename={\"/\"}>\n        <Switch>\n          <AuthorizedRoute path={\"/\"} component={Wrap}/>\n        </Switch>\n      </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ActionTypes from '../actions/types';\r\nconst defaultState = {\r\n}\r\n\r\nexport default function onAction (state = defaultState,action){\r\n    return state;\r\n    // switch (action.type){\r\n    //     case ActionTypes.GET_CONFIG_DATA_SUCCESS:\r\n    //         return action.data;;\r\n    //     default:\r\n    //         return state;\r\n    // }\r\n}\r\n","import ActionTypes from '../actions/types';\r\nconst defaultState = {\r\n}\r\n\r\nexport default function onAction (state = defaultState,action){\r\n    switch (action.type){\r\n        case ActionTypes.GET_CONFIG_DATA_SUCCESS:\r\n            return action.data;\r\n        case ActionTypes.SAVE_LOCAL_CONFIG_DATA_SUCCESS:\r\n            return action.data;\r\n        case ActionTypes.ADD_NEW_CLUSTER_SUCCESS:\r\n            state.all.children[action.clusterName] = {\r\n                edit:true,\r\n                hosts:{},\r\n                vars:{\r\n                    pg_cluster:action.clusterName,\r\n                    pg_users:[],\r\n                    pg_databases:[]\r\n                },\r\n\r\n            };\r\n            return JSON.parse(JSON.stringify(state));\r\n        case ActionTypes.REMOVE_CLUSTER_SUCCESS:\r\n            delete state.all.children[action.clusterName];\r\n            return JSON.parse(JSON.stringify(state));\r\n        case ActionTypes.ADD_NEW_CLUSTER_HOST_SUCCESS:\r\n            state.all.children[action.clusterName].edit = true;\r\n            state.all.children[action.clusterName].hosts[action.host_ip] = {\r\n                pg_offline_query:action.pg_offline_query,\r\n                pg_role:action.pg_role,\r\n                pg_seq:action.pg_seq,\r\n            }\r\n            return JSON.parse(JSON.stringify(state));\r\n        case ActionTypes.REMOVE_CLUSTER_HOST_SUCCESS:\r\n            state.all.children[action.clusterName].edit = true;\r\n            delete state.all.children[action.clusterName].hosts[action.hostName];\r\n            return JSON.parse(JSON.stringify(state));\r\n\r\n        case ActionTypes.ADD_NEW_CLUSTER_PG_USER_SUCCESS:\r\n            if(!state.all.children[action.clusterName]?.vars){\r\n                state.all.children[action.clusterName].vars = {};\r\n            }\r\n            if(!state.all.children[action.clusterName]?.vars?.pg_users){\r\n                state.all.children[action.clusterName].vars.pg_users = [];\r\n            }\r\n            if(state.all.children[action.clusterName]?.vars?.pg_users){\r\n                let pgUser = action.formData;\r\n\r\n                state.all.children[action.clusterName].vars.pg_users.push(\r\n                    pgUser\r\n                );\r\n                state.all.children[action.clusterName].edit = true;\r\n            }\r\n            return JSON.parse(JSON.stringify(state));\r\n\r\n        case ActionTypes.REMOVE_CLUSTER_PG_USER_SUCCESS:\r\n            if(state.all.children[action.clusterName]?.vars?.pg_users){\r\n                let fIndex = state.all.children[action.clusterName].vars.pg_users.findIndex(item => item.name === action.name)\r\n                state.all.children[action.clusterName].vars.pg_users.splice(fIndex, 1);\r\n                state.all.children[action.clusterName].edit = true;\r\n            }\r\n            return JSON.parse(JSON.stringify(state));\r\n\r\n\r\n        case ActionTypes.ADD_NEW_CLUSTER_PG_DATABASE_SUCCESS:\r\n            if(!state.all.children[action.clusterName]?.vars){\r\n                state.all.children[action.clusterName].vars = {};\r\n            }\r\n            if(!state.all.children[action.clusterName]?.vars?.pg_databases){\r\n                state.all.children[action.clusterName].vars.pg_databases = [];\r\n            }\r\n            if(state.all.children[action.clusterName]?.vars?.pg_databases){\r\n                let pgDatabase = action.formData;\r\n\r\n                state.all.children[action.clusterName].vars.pg_databases.push(\r\n                    pgDatabase\r\n                );\r\n                state.all.children[action.clusterName].edit = true;\r\n            }\r\n            return JSON.parse(JSON.stringify(state));\r\n\r\n        case ActionTypes.REMOVE_CLUSTER_PG_DATABASE_SUCCESS:\r\n            if(state.all.children[action.clusterName]?.vars?.pg_databases){\r\n                let fIndex = state.all.children[action.clusterName].vars.pg_databases.findIndex(item => item.name === action.name)\r\n                state.all.children[action.clusterName].vars.pg_databases.splice(fIndex, 1);\r\n                state.all.children[action.clusterName].edit = true;\r\n            }\r\n            return JSON.parse(JSON.stringify(state));\r\n\r\n        case ActionTypes.SAVE_LOCAL_CLUSTER_VARS_CONFIG_SUCCESS:\r\n            state.all.children[action.clusterName].vars = action.configData;\r\n            return JSON.parse(JSON.stringify(state));\r\n\r\n        case ActionTypes.SAVE_LOCAL_CLUSTER_CONFIG_SUCCESS:\r\n            state.all.children[action.clusterName] = action.configData;\r\n            return JSON.parse(JSON.stringify(state));\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import ActionTypes from '../actions/types';\r\nconst defaultState = {\r\n    list:[],\r\n    logs:{}\r\n}\r\n\r\nexport default function onAction (state = defaultState,action){\r\n    switch (action.type){\r\n        case ActionTypes.GET_JOBS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                list:action.data,\r\n            };\r\n        case ActionTypes.DELETE_JOB_SUCCESS:\r\n            return state;\r\n        case ActionTypes.CREATE_JOB_SUCCESS:\r\n            return {\r\n                ...state,\r\n                list:[action.data,...state.list]\r\n            };\r\n        case ActionTypes.GET_JOB_LOGS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                logs: {\r\n                    ...state.logs,\r\n                    [action.id]:action.data\r\n                }\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {combineReducers} from 'redux';\r\nimport account from './account';\r\nimport configData from './configData';\r\nimport jobs from './jobs';\r\n\r\nconst reducers = combineReducers({\r\n    account,\r\n    configData,\r\n    jobs\r\n})\r\n\r\nexport default reducers;\r\n","import {applyMiddleware, createStore} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport reducers from './reducers'\r\n/**\r\n * 自定义log中间件\r\n * @param store\r\n */\r\n\r\nconst logger = store => next => action => {\r\n    if (typeof action === 'function') {\r\n        //console.log('dispatching a function');\r\n    } else {\r\n        //console.log('dispatching ', {...action,...Config.clientInfo});\r\n    }\r\n    const result = next(action);\r\n    //console.log('nextState ', store.getState());\r\n\r\n    return result;\r\n};\r\n\r\nconst middlewares = [\r\n    logger,\r\n    thunk\r\n];\r\n\r\n/**\r\n * 创建store\r\n */\r\n\r\nconst createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore);\r\n\r\nconst initialState = {};\r\n\r\nconst store = createStoreWithMiddleware(reducers, initialState);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport eventEmitter from \"../commons/eventEmitter\";\r\nimport {Message} from \"semantic-ui-react\";\r\n\r\nconst toastTypeClassName = {\r\n    info:\"toast-primary\",\r\n    success:\"toast-success\",\r\n    warning:\"toast-warning\",\r\n    error:\"toast-error\"\r\n}\r\n\r\nclass ToastsPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            toasts:[]\r\n        }\r\n    }\r\n\r\n    _delItem(){\r\n        const {\r\n            toasts\r\n        } = this.state;\r\n        toasts.shift();\r\n        this.setState({\r\n            toasts:toasts\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.emitter = eventEmitter.addListener('showToasts',(data)=>{\r\n            this.setState({\r\n                toasts:[\r\n                    ...this.state.toasts,\r\n                    data\r\n                ]\r\n            },()=>{\r\n                setTimeout(()=>{\r\n                    this._delItem();\r\n                },3000)\r\n            })\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //eventEmitter.removeListener(this.emitter);\r\n    }\r\n\r\n    _renderToast(tItem,tIndex){\r\n        return (\r\n            <Message\r\n                className='toast'\r\n                {...{[tItem.type]:tItem.type}}\r\n                key={tIndex}\r\n                header={tItem.msg}\r\n            />\r\n        )\r\n    }\r\n\r\n    render() {\r\n\r\n        const {\r\n            toasts\r\n        } = this.state;\r\n        let renders = [];\r\n        toasts.forEach((tItem,tIndex)=>{\r\n            renders.push(this._renderToast(tItem,tIndex))\r\n        })\r\n        return (\r\n            <div id=\"toastsPanel\">\r\n                {renders}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ToastsPanel;\r\n","import React from 'react'\r\nimport {Confirm} from 'semantic-ui-react'\r\nimport eventEmitter from \"../commons/eventEmitter\";\r\n\r\nexport default class ConfirmBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            content:'',\r\n            confirmButton:'OK',\r\n            cancelButton:'Cancel'\r\n        }\r\n        this.parentCallback = null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.emitter = eventEmitter.addListener('showConfirmBox',(data)=>{\r\n            this.setState({\r\n                ...data,\r\n                open:true,\r\n            });\r\n            this.parentCallback = data.callback\r\n        })\r\n    }\r\n\r\n\r\n    handleConfirm(){\r\n        this.setState({\r\n            content: 'Are you sure?',\r\n            confirmButton:'OK',\r\n            cancelButton:'Cancel',\r\n            open: false\r\n        },()=>{\r\n            if(typeof this.parentCallback === 'function'){\r\n                this.parentCallback(true)\r\n            }\r\n        })\r\n    }\r\n    handleCancel(){\r\n        this.setState({\r\n            content: 'Are you sure?',\r\n            confirmButton:'OK',\r\n            cancelButton:'Cancel',\r\n            open: false\r\n        },()=>{\r\n            if(typeof this.parentCallback === 'function'){\r\n                this.parentCallback(false)\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            open,\r\n            content,\r\n            confirmButton,\r\n            cancelButton\r\n        } = this.state;\r\n\r\n        return (\r\n            <Confirm\r\n                size='mini'\r\n                open={open}\r\n                content={content}\r\n                confirmButton={confirmButton}\r\n                cancelButton={cancelButton}\r\n                onCancel={this.handleCancel.bind(this)}\r\n                onConfirm={this.handleConfirm.bind(this)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport LoadingCover from \"./components/loadingCover\";\nimport ToastsPanel from \"./components/toastsPanel\";\nimport ConfirmBox from \"./components/confirmBox\";\nimport 'semantic-ui-less/semantic.less'\n\nReactDOM.render(\n    <Provider store={store}>\n\n            <React.Fragment>\n                <LoadingCover/>\n                <ToastsPanel/>\n                <ConfirmBox/>\n                <App/>\n            </React.Fragment>\n\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}